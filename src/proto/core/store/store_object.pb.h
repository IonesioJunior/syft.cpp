// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/core/store/store_object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fstore_2fstore_5fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fstore_2fstore_5fobject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/core/common/common_object.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcore_2fstore_2fstore_5fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
namespace syft {
namespace core {
namespace store {
class Container;
class ContainerDefaultTypeInternal;
extern ContainerDefaultTypeInternal _Container_default_instance_;
class DictContainer;
class DictContainerDefaultTypeInternal;
extern DictContainerDefaultTypeInternal _DictContainer_default_instance_;
class DictContainer_DictMappingEntry_DoNotUse;
class DictContainer_DictMappingEntry_DoNotUseDefaultTypeInternal;
extern DictContainer_DictMappingEntry_DoNotUseDefaultTypeInternal _DictContainer_DictMappingEntry_DoNotUse_default_instance_;
class GridContainer;
class GridContainerDefaultTypeInternal;
extern GridContainerDefaultTypeInternal _GridContainer_default_instance_;
class SearchEngine;
class SearchEngineDefaultTypeInternal;
extern SearchEngineDefaultTypeInternal _SearchEngine_default_instance_;
class SqlContainer;
class SqlContainerDefaultTypeInternal;
extern SqlContainerDefaultTypeInternal _SqlContainer_default_instance_;
class StorableObject;
class StorableObjectDefaultTypeInternal;
extern StorableObjectDefaultTypeInternal _StorableObject_default_instance_;
class StoreGenericObject;
class StoreGenericObjectDefaultTypeInternal;
extern StoreGenericObjectDefaultTypeInternal _StoreGenericObject_default_instance_;
class StoreObject;
class StoreObjectDefaultTypeInternal;
extern StoreObjectDefaultTypeInternal _StoreObject_default_instance_;
}  // namespace store
}  // namespace core
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> ::syft::core::store::Container* Arena::CreateMaybeMessage<::syft::core::store::Container>(Arena*);
template<> ::syft::core::store::DictContainer* Arena::CreateMaybeMessage<::syft::core::store::DictContainer>(Arena*);
template<> ::syft::core::store::DictContainer_DictMappingEntry_DoNotUse* Arena::CreateMaybeMessage<::syft::core::store::DictContainer_DictMappingEntry_DoNotUse>(Arena*);
template<> ::syft::core::store::GridContainer* Arena::CreateMaybeMessage<::syft::core::store::GridContainer>(Arena*);
template<> ::syft::core::store::SearchEngine* Arena::CreateMaybeMessage<::syft::core::store::SearchEngine>(Arena*);
template<> ::syft::core::store::SqlContainer* Arena::CreateMaybeMessage<::syft::core::store::SqlContainer>(Arena*);
template<> ::syft::core::store::StorableObject* Arena::CreateMaybeMessage<::syft::core::store::StorableObject>(Arena*);
template<> ::syft::core::store::StoreGenericObject* Arena::CreateMaybeMessage<::syft::core::store::StoreGenericObject>(Arena*);
template<> ::syft::core::store::StoreObject* Arena::CreateMaybeMessage<::syft::core::store::StoreObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syft {
namespace core {
namespace store {

// ===================================================================

class StoreGenericObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.StoreGenericObject) */ {
 public:
  inline StoreGenericObject() : StoreGenericObject(nullptr) {}
  virtual ~StoreGenericObject();

  StoreGenericObject(const StoreGenericObject& from);
  StoreGenericObject(StoreGenericObject&& from) noexcept
    : StoreGenericObject() {
    *this = ::std::move(from);
  }

  inline StoreGenericObject& operator=(const StoreGenericObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreGenericObject& operator=(StoreGenericObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreGenericObject& default_instance();

  static inline const StoreGenericObject* internal_default_instance() {
    return reinterpret_cast<const StoreGenericObject*>(
               &_StoreGenericObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoreGenericObject& a, StoreGenericObject& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreGenericObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreGenericObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreGenericObject* New() const final {
    return CreateMaybeMessage<StoreGenericObject>(nullptr);
  }

  StoreGenericObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreGenericObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreGenericObject& from);
  void MergeFrom(const StoreGenericObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreGenericObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.StoreGenericObject";
  }
  protected:
  explicit StoreGenericObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorableObjectFieldNumber = 1,
    kStoreObjectFieldNumber = 2,
  };
  // .syft.core.store.StorableObject storable_object = 1;
  bool has_storable_object() const;
  private:
  bool _internal_has_storable_object() const;
  public:
  void clear_storable_object();
  const ::syft::core::store::StorableObject& storable_object() const;
  ::syft::core::store::StorableObject* release_storable_object();
  ::syft::core::store::StorableObject* mutable_storable_object();
  void set_allocated_storable_object(::syft::core::store::StorableObject* storable_object);
  private:
  const ::syft::core::store::StorableObject& _internal_storable_object() const;
  ::syft::core::store::StorableObject* _internal_mutable_storable_object();
  public:
  void unsafe_arena_set_allocated_storable_object(
      ::syft::core::store::StorableObject* storable_object);
  ::syft::core::store::StorableObject* unsafe_arena_release_storable_object();

  // .syft.core.store.StoreObject store_object = 2;
  bool has_store_object() const;
  private:
  bool _internal_has_store_object() const;
  public:
  void clear_store_object();
  const ::syft::core::store::StoreObject& store_object() const;
  ::syft::core::store::StoreObject* release_store_object();
  ::syft::core::store::StoreObject* mutable_store_object();
  void set_allocated_store_object(::syft::core::store::StoreObject* store_object);
  private:
  const ::syft::core::store::StoreObject& _internal_store_object() const;
  ::syft::core::store::StoreObject* _internal_mutable_store_object();
  public:
  void unsafe_arena_set_allocated_store_object(
      ::syft::core::store::StoreObject* store_object);
  ::syft::core::store::StoreObject* unsafe_arena_release_store_object();

  // @@protoc_insertion_point(class_scope:syft.core.store.StoreGenericObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::syft::core::store::StorableObject* storable_object_;
  ::syft::core::store::StoreObject* store_object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// -------------------------------------------------------------------

class StorableObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.StorableObject) */ {
 public:
  inline StorableObject() : StorableObject(nullptr) {}
  virtual ~StorableObject();

  StorableObject(const StorableObject& from);
  StorableObject(StorableObject&& from) noexcept
    : StorableObject() {
    *this = ::std::move(from);
  }

  inline StorableObject& operator=(const StorableObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorableObject& operator=(StorableObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StorableObject& default_instance();

  static inline const StorableObject* internal_default_instance() {
    return reinterpret_cast<const StorableObject*>(
               &_StorableObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StorableObject& a, StorableObject& b) {
    a.Swap(&b);
  }
  inline void Swap(StorableObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorableObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StorableObject* New() const final {
    return CreateMaybeMessage<StorableObject>(nullptr);
  }

  StorableObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StorableObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StorableObject& from);
  void MergeFrom(const StorableObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorableObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.StorableObject";
  }
  protected:
  explicit StorableObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kObjTypeFieldNumber = 2,
    kSchematicQualnameFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kIdFieldNumber = 1,
    kDataFieldNumber = 4,
  };
  // repeated string tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string obj_type = 2;
  void clear_obj_type();
  const std::string& obj_type() const;
  void set_obj_type(const std::string& value);
  void set_obj_type(std::string&& value);
  void set_obj_type(const char* value);
  void set_obj_type(const char* value, size_t size);
  std::string* mutable_obj_type();
  std::string* release_obj_type();
  void set_allocated_obj_type(std::string* obj_type);
  private:
  const std::string& _internal_obj_type() const;
  void _internal_set_obj_type(const std::string& value);
  std::string* _internal_mutable_obj_type();
  public:

  // string schematic_qualname = 3;
  void clear_schematic_qualname();
  const std::string& schematic_qualname() const;
  void set_schematic_qualname(const std::string& value);
  void set_schematic_qualname(std::string&& value);
  void set_schematic_qualname(const char* value);
  void set_schematic_qualname(const char* value, size_t size);
  std::string* mutable_schematic_qualname();
  std::string* release_schematic_qualname();
  void set_allocated_schematic_qualname(std::string* schematic_qualname);
  private:
  const std::string& _internal_schematic_qualname() const;
  void _internal_set_schematic_qualname(const std::string& value);
  std::string* _internal_mutable_schematic_qualname();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .syft.core.common.UID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::syft::core::common::UID& id() const;
  ::syft::core::common::UID* release_id();
  ::syft::core::common::UID* mutable_id();
  void set_allocated_id(::syft::core::common::UID* id);
  private:
  const ::syft::core::common::UID& _internal_id() const;
  ::syft::core::common::UID* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::syft::core::common::UID* id);
  ::syft::core::common::UID* unsafe_arena_release_id();

  // .google.protobuf.Any data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:syft.core.store.StorableObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schematic_qualname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::syft::core::common::UID* id_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// -------------------------------------------------------------------

class StoreObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.StoreObject) */ {
 public:
  inline StoreObject() : StoreObject(nullptr) {}
  virtual ~StoreObject();

  StoreObject(const StoreObject& from);
  StoreObject(StoreObject&& from) noexcept
    : StoreObject() {
    *this = ::std::move(from);
  }

  inline StoreObject& operator=(const StoreObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreObject& operator=(StoreObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreObject& default_instance();

  static inline const StoreObject* internal_default_instance() {
    return reinterpret_cast<const StoreObject*>(
               &_StoreObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StoreObject& a, StoreObject& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreObject* New() const final {
    return CreateMaybeMessage<StoreObject>(nullptr);
  }

  StoreObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreObject& from);
  void MergeFrom(const StoreObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.StoreObject";
  }
  protected:
  explicit StoreObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerFieldNumber = 1,
    kSearchEngineFieldNumber = 2,
  };
  // .syft.core.store.Container container = 1;
  bool has_container() const;
  private:
  bool _internal_has_container() const;
  public:
  void clear_container();
  const ::syft::core::store::Container& container() const;
  ::syft::core::store::Container* release_container();
  ::syft::core::store::Container* mutable_container();
  void set_allocated_container(::syft::core::store::Container* container);
  private:
  const ::syft::core::store::Container& _internal_container() const;
  ::syft::core::store::Container* _internal_mutable_container();
  public:
  void unsafe_arena_set_allocated_container(
      ::syft::core::store::Container* container);
  ::syft::core::store::Container* unsafe_arena_release_container();

  // .syft.core.store.SearchEngine search_engine = 2;
  bool has_search_engine() const;
  private:
  bool _internal_has_search_engine() const;
  public:
  void clear_search_engine();
  const ::syft::core::store::SearchEngine& search_engine() const;
  ::syft::core::store::SearchEngine* release_search_engine();
  ::syft::core::store::SearchEngine* mutable_search_engine();
  void set_allocated_search_engine(::syft::core::store::SearchEngine* search_engine);
  private:
  const ::syft::core::store::SearchEngine& _internal_search_engine() const;
  ::syft::core::store::SearchEngine* _internal_mutable_search_engine();
  public:
  void unsafe_arena_set_allocated_search_engine(
      ::syft::core::store::SearchEngine* search_engine);
  ::syft::core::store::SearchEngine* unsafe_arena_release_search_engine();

  // @@protoc_insertion_point(class_scope:syft.core.store.StoreObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::syft::core::store::Container* container_;
  ::syft::core::store::SearchEngine* search_engine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// -------------------------------------------------------------------

class Container PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.Container) */ {
 public:
  inline Container() : Container(nullptr) {}
  virtual ~Container();

  Container(const Container& from);
  Container(Container&& from) noexcept
    : Container() {
    *this = ::std::move(from);
  }

  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }
  inline Container& operator=(Container&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Container& default_instance();

  static inline const Container* internal_default_instance() {
    return reinterpret_cast<const Container*>(
               &_Container_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Container& a, Container& b) {
    a.Swap(&b);
  }
  inline void Swap(Container* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Container* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Container* New() const final {
    return CreateMaybeMessage<Container>(nullptr);
  }

  Container* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Container>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Container& from);
  void MergeFrom(const Container& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Container* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.Container";
  }
  protected:
  explicit Container(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDictContainerFieldNumber = 1,
    kSqlContainerFieldNumber = 2,
    kGridContainerFieldNumber = 3,
  };
  // .syft.core.store.DictContainer dict_container = 1;
  bool has_dict_container() const;
  private:
  bool _internal_has_dict_container() const;
  public:
  void clear_dict_container();
  const ::syft::core::store::DictContainer& dict_container() const;
  ::syft::core::store::DictContainer* release_dict_container();
  ::syft::core::store::DictContainer* mutable_dict_container();
  void set_allocated_dict_container(::syft::core::store::DictContainer* dict_container);
  private:
  const ::syft::core::store::DictContainer& _internal_dict_container() const;
  ::syft::core::store::DictContainer* _internal_mutable_dict_container();
  public:
  void unsafe_arena_set_allocated_dict_container(
      ::syft::core::store::DictContainer* dict_container);
  ::syft::core::store::DictContainer* unsafe_arena_release_dict_container();

  // .syft.core.store.SqlContainer sql_container = 2;
  bool has_sql_container() const;
  private:
  bool _internal_has_sql_container() const;
  public:
  void clear_sql_container();
  const ::syft::core::store::SqlContainer& sql_container() const;
  ::syft::core::store::SqlContainer* release_sql_container();
  ::syft::core::store::SqlContainer* mutable_sql_container();
  void set_allocated_sql_container(::syft::core::store::SqlContainer* sql_container);
  private:
  const ::syft::core::store::SqlContainer& _internal_sql_container() const;
  ::syft::core::store::SqlContainer* _internal_mutable_sql_container();
  public:
  void unsafe_arena_set_allocated_sql_container(
      ::syft::core::store::SqlContainer* sql_container);
  ::syft::core::store::SqlContainer* unsafe_arena_release_sql_container();

  // .syft.core.store.GridContainer grid_container = 3;
  bool has_grid_container() const;
  private:
  bool _internal_has_grid_container() const;
  public:
  void clear_grid_container();
  const ::syft::core::store::GridContainer& grid_container() const;
  ::syft::core::store::GridContainer* release_grid_container();
  ::syft::core::store::GridContainer* mutable_grid_container();
  void set_allocated_grid_container(::syft::core::store::GridContainer* grid_container);
  private:
  const ::syft::core::store::GridContainer& _internal_grid_container() const;
  ::syft::core::store::GridContainer* _internal_mutable_grid_container();
  public:
  void unsafe_arena_set_allocated_grid_container(
      ::syft::core::store::GridContainer* grid_container);
  ::syft::core::store::GridContainer* unsafe_arena_release_grid_container();

  // @@protoc_insertion_point(class_scope:syft.core.store.Container)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::syft::core::store::DictContainer* dict_container_;
  ::syft::core::store::SqlContainer* sql_container_;
  ::syft::core::store::GridContainer* grid_container_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// -------------------------------------------------------------------

class SearchEngine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.SearchEngine) */ {
 public:
  inline SearchEngine() : SearchEngine(nullptr) {}
  virtual ~SearchEngine();

  SearchEngine(const SearchEngine& from);
  SearchEngine(SearchEngine&& from) noexcept
    : SearchEngine() {
    *this = ::std::move(from);
  }

  inline SearchEngine& operator=(const SearchEngine& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchEngine& operator=(SearchEngine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchEngine& default_instance();

  static inline const SearchEngine* internal_default_instance() {
    return reinterpret_cast<const SearchEngine*>(
               &_SearchEngine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchEngine& a, SearchEngine& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchEngine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchEngine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchEngine* New() const final {
    return CreateMaybeMessage<SearchEngine>(nullptr);
  }

  SearchEngine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchEngine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchEngine& from);
  void MergeFrom(const SearchEngine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchEngine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.SearchEngine";
  }
  protected:
  explicit SearchEngine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:syft.core.store.SearchEngine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DictContainer_DictMappingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DictContainer_DictMappingEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DictContainer_DictMappingEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DictContainer_DictMappingEntry_DoNotUse();
  explicit DictContainer_DictMappingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DictContainer_DictMappingEntry_DoNotUse& other);
  static const DictContainer_DictMappingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DictContainer_DictMappingEntry_DoNotUse*>(&_DictContainer_DictMappingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class DictContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.DictContainer) */ {
 public:
  inline DictContainer() : DictContainer(nullptr) {}
  virtual ~DictContainer();

  DictContainer(const DictContainer& from);
  DictContainer(DictContainer&& from) noexcept
    : DictContainer() {
    *this = ::std::move(from);
  }

  inline DictContainer& operator=(const DictContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictContainer& operator=(DictContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DictContainer& default_instance();

  static inline const DictContainer* internal_default_instance() {
    return reinterpret_cast<const DictContainer*>(
               &_DictContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DictContainer& a, DictContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(DictContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DictContainer* New() const final {
    return CreateMaybeMessage<DictContainer>(nullptr);
  }

  DictContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DictContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DictContainer& from);
  void MergeFrom(const DictContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.DictContainer";
  }
  protected:
  explicit DictContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDictMappingFieldNumber = 1,
  };
  // map<int64, .google.protobuf.Any> dict_mapping = 1;
  int dict_mapping_size() const;
  private:
  int _internal_dict_mapping_size() const;
  public:
  void clear_dict_mapping();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >&
      _internal_dict_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_dict_mapping();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >&
      dict_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >*
      mutable_dict_mapping();

  // @@protoc_insertion_point(class_scope:syft.core.store.DictContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DictContainer_DictMappingEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> dict_mapping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// -------------------------------------------------------------------

class SqlContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.SqlContainer) */ {
 public:
  inline SqlContainer() : SqlContainer(nullptr) {}
  virtual ~SqlContainer();

  SqlContainer(const SqlContainer& from);
  SqlContainer(SqlContainer&& from) noexcept
    : SqlContainer() {
    *this = ::std::move(from);
  }

  inline SqlContainer& operator=(const SqlContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SqlContainer& operator=(SqlContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SqlContainer& default_instance();

  static inline const SqlContainer* internal_default_instance() {
    return reinterpret_cast<const SqlContainer*>(
               &_SqlContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SqlContainer& a, SqlContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(SqlContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SqlContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SqlContainer* New() const final {
    return CreateMaybeMessage<SqlContainer>(nullptr);
  }

  SqlContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SqlContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SqlContainer& from);
  void MergeFrom(const SqlContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.SqlContainer";
  }
  protected:
  explicit SqlContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:syft.core.store.SqlContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// -------------------------------------------------------------------

class GridContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.store.GridContainer) */ {
 public:
  inline GridContainer() : GridContainer(nullptr) {}
  virtual ~GridContainer();

  GridContainer(const GridContainer& from);
  GridContainer(GridContainer&& from) noexcept
    : GridContainer() {
    *this = ::std::move(from);
  }

  inline GridContainer& operator=(const GridContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridContainer& operator=(GridContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridContainer& default_instance();

  static inline const GridContainer* internal_default_instance() {
    return reinterpret_cast<const GridContainer*>(
               &_GridContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GridContainer& a, GridContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(GridContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridContainer* New() const final {
    return CreateMaybeMessage<GridContainer>(nullptr);
  }

  GridContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridContainer& from);
  void MergeFrom(const GridContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.store.GridContainer";
  }
  protected:
  explicit GridContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto);
    return ::descriptor_table_proto_2fcore_2fstore_2fstore_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:syft.core.store.GridContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fstore_2fstore_5fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoreGenericObject

// .syft.core.store.StorableObject storable_object = 1;
inline bool StoreGenericObject::_internal_has_storable_object() const {
  return this != internal_default_instance() && storable_object_ != nullptr;
}
inline bool StoreGenericObject::has_storable_object() const {
  return _internal_has_storable_object();
}
inline void StoreGenericObject::clear_storable_object() {
  if (GetArena() == nullptr && storable_object_ != nullptr) {
    delete storable_object_;
  }
  storable_object_ = nullptr;
}
inline const ::syft::core::store::StorableObject& StoreGenericObject::_internal_storable_object() const {
  const ::syft::core::store::StorableObject* p = storable_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::store::StorableObject&>(
      ::syft::core::store::_StorableObject_default_instance_);
}
inline const ::syft::core::store::StorableObject& StoreGenericObject::storable_object() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StoreGenericObject.storable_object)
  return _internal_storable_object();
}
inline void StoreGenericObject::unsafe_arena_set_allocated_storable_object(
    ::syft::core::store::StorableObject* storable_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storable_object_);
  }
  storable_object_ = storable_object;
  if (storable_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.StoreGenericObject.storable_object)
}
inline ::syft::core::store::StorableObject* StoreGenericObject::release_storable_object() {
  
  ::syft::core::store::StorableObject* temp = storable_object_;
  storable_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::store::StorableObject* StoreGenericObject::unsafe_arena_release_storable_object() {
  // @@protoc_insertion_point(field_release:syft.core.store.StoreGenericObject.storable_object)
  
  ::syft::core::store::StorableObject* temp = storable_object_;
  storable_object_ = nullptr;
  return temp;
}
inline ::syft::core::store::StorableObject* StoreGenericObject::_internal_mutable_storable_object() {
  
  if (storable_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::store::StorableObject>(GetArena());
    storable_object_ = p;
  }
  return storable_object_;
}
inline ::syft::core::store::StorableObject* StoreGenericObject::mutable_storable_object() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StoreGenericObject.storable_object)
  return _internal_mutable_storable_object();
}
inline void StoreGenericObject::set_allocated_storable_object(::syft::core::store::StorableObject* storable_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete storable_object_;
  }
  if (storable_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storable_object);
    if (message_arena != submessage_arena) {
      storable_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storable_object, submessage_arena);
    }
    
  } else {
    
  }
  storable_object_ = storable_object;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StoreGenericObject.storable_object)
}

// .syft.core.store.StoreObject store_object = 2;
inline bool StoreGenericObject::_internal_has_store_object() const {
  return this != internal_default_instance() && store_object_ != nullptr;
}
inline bool StoreGenericObject::has_store_object() const {
  return _internal_has_store_object();
}
inline void StoreGenericObject::clear_store_object() {
  if (GetArena() == nullptr && store_object_ != nullptr) {
    delete store_object_;
  }
  store_object_ = nullptr;
}
inline const ::syft::core::store::StoreObject& StoreGenericObject::_internal_store_object() const {
  const ::syft::core::store::StoreObject* p = store_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::store::StoreObject&>(
      ::syft::core::store::_StoreObject_default_instance_);
}
inline const ::syft::core::store::StoreObject& StoreGenericObject::store_object() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StoreGenericObject.store_object)
  return _internal_store_object();
}
inline void StoreGenericObject::unsafe_arena_set_allocated_store_object(
    ::syft::core::store::StoreObject* store_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_object_);
  }
  store_object_ = store_object;
  if (store_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.StoreGenericObject.store_object)
}
inline ::syft::core::store::StoreObject* StoreGenericObject::release_store_object() {
  
  ::syft::core::store::StoreObject* temp = store_object_;
  store_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::store::StoreObject* StoreGenericObject::unsafe_arena_release_store_object() {
  // @@protoc_insertion_point(field_release:syft.core.store.StoreGenericObject.store_object)
  
  ::syft::core::store::StoreObject* temp = store_object_;
  store_object_ = nullptr;
  return temp;
}
inline ::syft::core::store::StoreObject* StoreGenericObject::_internal_mutable_store_object() {
  
  if (store_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::store::StoreObject>(GetArena());
    store_object_ = p;
  }
  return store_object_;
}
inline ::syft::core::store::StoreObject* StoreGenericObject::mutable_store_object() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StoreGenericObject.store_object)
  return _internal_mutable_store_object();
}
inline void StoreGenericObject::set_allocated_store_object(::syft::core::store::StoreObject* store_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete store_object_;
  }
  if (store_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(store_object);
    if (message_arena != submessage_arena) {
      store_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store_object, submessage_arena);
    }
    
  } else {
    
  }
  store_object_ = store_object;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StoreGenericObject.store_object)
}

// -------------------------------------------------------------------

// StorableObject

// .syft.core.common.UID id = 1;
inline bool StorableObject::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool StorableObject::has_id() const {
  return _internal_has_id();
}
inline const ::syft::core::common::UID& StorableObject::_internal_id() const {
  const ::syft::core::common::UID* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::common::UID&>(
      ::syft::core::common::_UID_default_instance_);
}
inline const ::syft::core::common::UID& StorableObject::id() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StorableObject.id)
  return _internal_id();
}
inline void StorableObject::unsafe_arena_set_allocated_id(
    ::syft::core::common::UID* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.StorableObject.id)
}
inline ::syft::core::common::UID* StorableObject::release_id() {
  
  ::syft::core::common::UID* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::common::UID* StorableObject::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:syft.core.store.StorableObject.id)
  
  ::syft::core::common::UID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::syft::core::common::UID* StorableObject::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::common::UID>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::syft::core::common::UID* StorableObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StorableObject.id)
  return _internal_mutable_id();
}
inline void StorableObject::set_allocated_id(::syft::core::common::UID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StorableObject.id)
}

// string obj_type = 2;
inline void StorableObject::clear_obj_type() {
  obj_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StorableObject::obj_type() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StorableObject.obj_type)
  return _internal_obj_type();
}
inline void StorableObject::set_obj_type(const std::string& value) {
  _internal_set_obj_type(value);
  // @@protoc_insertion_point(field_set:syft.core.store.StorableObject.obj_type)
}
inline std::string* StorableObject::mutable_obj_type() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StorableObject.obj_type)
  return _internal_mutable_obj_type();
}
inline const std::string& StorableObject::_internal_obj_type() const {
  return obj_type_.Get();
}
inline void StorableObject::_internal_set_obj_type(const std::string& value) {
  
  obj_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StorableObject::set_obj_type(std::string&& value) {
  
  obj_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.store.StorableObject.obj_type)
}
inline void StorableObject::set_obj_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.store.StorableObject.obj_type)
}
inline void StorableObject::set_obj_type(const char* value,
    size_t size) {
  
  obj_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.store.StorableObject.obj_type)
}
inline std::string* StorableObject::_internal_mutable_obj_type() {
  
  return obj_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StorableObject::release_obj_type() {
  // @@protoc_insertion_point(field_release:syft.core.store.StorableObject.obj_type)
  return obj_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorableObject::set_allocated_obj_type(std::string* obj_type) {
  if (obj_type != nullptr) {
    
  } else {
    
  }
  obj_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StorableObject.obj_type)
}

// string schematic_qualname = 3;
inline void StorableObject::clear_schematic_qualname() {
  schematic_qualname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StorableObject::schematic_qualname() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StorableObject.schematic_qualname)
  return _internal_schematic_qualname();
}
inline void StorableObject::set_schematic_qualname(const std::string& value) {
  _internal_set_schematic_qualname(value);
  // @@protoc_insertion_point(field_set:syft.core.store.StorableObject.schematic_qualname)
}
inline std::string* StorableObject::mutable_schematic_qualname() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StorableObject.schematic_qualname)
  return _internal_mutable_schematic_qualname();
}
inline const std::string& StorableObject::_internal_schematic_qualname() const {
  return schematic_qualname_.Get();
}
inline void StorableObject::_internal_set_schematic_qualname(const std::string& value) {
  
  schematic_qualname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StorableObject::set_schematic_qualname(std::string&& value) {
  
  schematic_qualname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.store.StorableObject.schematic_qualname)
}
inline void StorableObject::set_schematic_qualname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schematic_qualname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.store.StorableObject.schematic_qualname)
}
inline void StorableObject::set_schematic_qualname(const char* value,
    size_t size) {
  
  schematic_qualname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.store.StorableObject.schematic_qualname)
}
inline std::string* StorableObject::_internal_mutable_schematic_qualname() {
  
  return schematic_qualname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StorableObject::release_schematic_qualname() {
  // @@protoc_insertion_point(field_release:syft.core.store.StorableObject.schematic_qualname)
  return schematic_qualname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorableObject::set_allocated_schematic_qualname(std::string* schematic_qualname) {
  if (schematic_qualname != nullptr) {
    
  } else {
    
  }
  schematic_qualname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schematic_qualname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StorableObject.schematic_qualname)
}

// .google.protobuf.Any data = 4;
inline bool StorableObject::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool StorableObject::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& StorableObject::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& StorableObject::data() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StorableObject.data)
  return _internal_data();
}
inline void StorableObject::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.StorableObject.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* StorableObject::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* StorableObject::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:syft.core.store.StorableObject.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* StorableObject::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* StorableObject::mutable_data() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StorableObject.data)
  return _internal_mutable_data();
}
inline void StorableObject::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StorableObject.data)
}

// string description = 5;
inline void StorableObject::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StorableObject::description() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StorableObject.description)
  return _internal_description();
}
inline void StorableObject::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:syft.core.store.StorableObject.description)
}
inline std::string* StorableObject::mutable_description() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StorableObject.description)
  return _internal_mutable_description();
}
inline const std::string& StorableObject::_internal_description() const {
  return description_.Get();
}
inline void StorableObject::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StorableObject::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.store.StorableObject.description)
}
inline void StorableObject::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.store.StorableObject.description)
}
inline void StorableObject::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.store.StorableObject.description)
}
inline std::string* StorableObject::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StorableObject::release_description() {
  // @@protoc_insertion_point(field_release:syft.core.store.StorableObject.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StorableObject::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StorableObject.description)
}

// repeated string tags = 6;
inline int StorableObject::_internal_tags_size() const {
  return tags_.size();
}
inline int StorableObject::tags_size() const {
  return _internal_tags_size();
}
inline void StorableObject::clear_tags() {
  tags_.Clear();
}
inline std::string* StorableObject::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:syft.core.store.StorableObject.tags)
  return _internal_add_tags();
}
inline const std::string& StorableObject::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& StorableObject::tags(int index) const {
  // @@protoc_insertion_point(field_get:syft.core.store.StorableObject.tags)
  return _internal_tags(index);
}
inline std::string* StorableObject::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StorableObject.tags)
  return tags_.Mutable(index);
}
inline void StorableObject::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:syft.core.store.StorableObject.tags)
  tags_.Mutable(index)->assign(value);
}
inline void StorableObject::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:syft.core.store.StorableObject.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void StorableObject::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:syft.core.store.StorableObject.tags)
}
inline void StorableObject::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:syft.core.store.StorableObject.tags)
}
inline std::string* StorableObject::_internal_add_tags() {
  return tags_.Add();
}
inline void StorableObject::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:syft.core.store.StorableObject.tags)
}
inline void StorableObject::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:syft.core.store.StorableObject.tags)
}
inline void StorableObject::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:syft.core.store.StorableObject.tags)
}
inline void StorableObject::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:syft.core.store.StorableObject.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StorableObject::tags() const {
  // @@protoc_insertion_point(field_list:syft.core.store.StorableObject.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StorableObject::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:syft.core.store.StorableObject.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// StoreObject

// .syft.core.store.Container container = 1;
inline bool StoreObject::_internal_has_container() const {
  return this != internal_default_instance() && container_ != nullptr;
}
inline bool StoreObject::has_container() const {
  return _internal_has_container();
}
inline void StoreObject::clear_container() {
  if (GetArena() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
}
inline const ::syft::core::store::Container& StoreObject::_internal_container() const {
  const ::syft::core::store::Container* p = container_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::store::Container&>(
      ::syft::core::store::_Container_default_instance_);
}
inline const ::syft::core::store::Container& StoreObject::container() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StoreObject.container)
  return _internal_container();
}
inline void StoreObject::unsafe_arena_set_allocated_container(
    ::syft::core::store::Container* container) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_);
  }
  container_ = container;
  if (container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.StoreObject.container)
}
inline ::syft::core::store::Container* StoreObject::release_container() {
  
  ::syft::core::store::Container* temp = container_;
  container_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::store::Container* StoreObject::unsafe_arena_release_container() {
  // @@protoc_insertion_point(field_release:syft.core.store.StoreObject.container)
  
  ::syft::core::store::Container* temp = container_;
  container_ = nullptr;
  return temp;
}
inline ::syft::core::store::Container* StoreObject::_internal_mutable_container() {
  
  if (container_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::store::Container>(GetArena());
    container_ = p;
  }
  return container_;
}
inline ::syft::core::store::Container* StoreObject::mutable_container() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StoreObject.container)
  return _internal_mutable_container();
}
inline void StoreObject::set_allocated_container(::syft::core::store::Container* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete container_;
  }
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(container);
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    
  } else {
    
  }
  container_ = container;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StoreObject.container)
}

// .syft.core.store.SearchEngine search_engine = 2;
inline bool StoreObject::_internal_has_search_engine() const {
  return this != internal_default_instance() && search_engine_ != nullptr;
}
inline bool StoreObject::has_search_engine() const {
  return _internal_has_search_engine();
}
inline void StoreObject::clear_search_engine() {
  if (GetArena() == nullptr && search_engine_ != nullptr) {
    delete search_engine_;
  }
  search_engine_ = nullptr;
}
inline const ::syft::core::store::SearchEngine& StoreObject::_internal_search_engine() const {
  const ::syft::core::store::SearchEngine* p = search_engine_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::store::SearchEngine&>(
      ::syft::core::store::_SearchEngine_default_instance_);
}
inline const ::syft::core::store::SearchEngine& StoreObject::search_engine() const {
  // @@protoc_insertion_point(field_get:syft.core.store.StoreObject.search_engine)
  return _internal_search_engine();
}
inline void StoreObject::unsafe_arena_set_allocated_search_engine(
    ::syft::core::store::SearchEngine* search_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_engine_);
  }
  search_engine_ = search_engine;
  if (search_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.StoreObject.search_engine)
}
inline ::syft::core::store::SearchEngine* StoreObject::release_search_engine() {
  
  ::syft::core::store::SearchEngine* temp = search_engine_;
  search_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::store::SearchEngine* StoreObject::unsafe_arena_release_search_engine() {
  // @@protoc_insertion_point(field_release:syft.core.store.StoreObject.search_engine)
  
  ::syft::core::store::SearchEngine* temp = search_engine_;
  search_engine_ = nullptr;
  return temp;
}
inline ::syft::core::store::SearchEngine* StoreObject::_internal_mutable_search_engine() {
  
  if (search_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::store::SearchEngine>(GetArena());
    search_engine_ = p;
  }
  return search_engine_;
}
inline ::syft::core::store::SearchEngine* StoreObject::mutable_search_engine() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.StoreObject.search_engine)
  return _internal_mutable_search_engine();
}
inline void StoreObject::set_allocated_search_engine(::syft::core::store::SearchEngine* search_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete search_engine_;
  }
  if (search_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(search_engine);
    if (message_arena != submessage_arena) {
      search_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_engine, submessage_arena);
    }
    
  } else {
    
  }
  search_engine_ = search_engine;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.StoreObject.search_engine)
}

// -------------------------------------------------------------------

// Container

// .syft.core.store.DictContainer dict_container = 1;
inline bool Container::_internal_has_dict_container() const {
  return this != internal_default_instance() && dict_container_ != nullptr;
}
inline bool Container::has_dict_container() const {
  return _internal_has_dict_container();
}
inline void Container::clear_dict_container() {
  if (GetArena() == nullptr && dict_container_ != nullptr) {
    delete dict_container_;
  }
  dict_container_ = nullptr;
}
inline const ::syft::core::store::DictContainer& Container::_internal_dict_container() const {
  const ::syft::core::store::DictContainer* p = dict_container_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::store::DictContainer&>(
      ::syft::core::store::_DictContainer_default_instance_);
}
inline const ::syft::core::store::DictContainer& Container::dict_container() const {
  // @@protoc_insertion_point(field_get:syft.core.store.Container.dict_container)
  return _internal_dict_container();
}
inline void Container::unsafe_arena_set_allocated_dict_container(
    ::syft::core::store::DictContainer* dict_container) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dict_container_);
  }
  dict_container_ = dict_container;
  if (dict_container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.Container.dict_container)
}
inline ::syft::core::store::DictContainer* Container::release_dict_container() {
  
  ::syft::core::store::DictContainer* temp = dict_container_;
  dict_container_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::store::DictContainer* Container::unsafe_arena_release_dict_container() {
  // @@protoc_insertion_point(field_release:syft.core.store.Container.dict_container)
  
  ::syft::core::store::DictContainer* temp = dict_container_;
  dict_container_ = nullptr;
  return temp;
}
inline ::syft::core::store::DictContainer* Container::_internal_mutable_dict_container() {
  
  if (dict_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::store::DictContainer>(GetArena());
    dict_container_ = p;
  }
  return dict_container_;
}
inline ::syft::core::store::DictContainer* Container::mutable_dict_container() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.Container.dict_container)
  return _internal_mutable_dict_container();
}
inline void Container::set_allocated_dict_container(::syft::core::store::DictContainer* dict_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dict_container_;
  }
  if (dict_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dict_container);
    if (message_arena != submessage_arena) {
      dict_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dict_container, submessage_arena);
    }
    
  } else {
    
  }
  dict_container_ = dict_container;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.Container.dict_container)
}

// .syft.core.store.SqlContainer sql_container = 2;
inline bool Container::_internal_has_sql_container() const {
  return this != internal_default_instance() && sql_container_ != nullptr;
}
inline bool Container::has_sql_container() const {
  return _internal_has_sql_container();
}
inline void Container::clear_sql_container() {
  if (GetArena() == nullptr && sql_container_ != nullptr) {
    delete sql_container_;
  }
  sql_container_ = nullptr;
}
inline const ::syft::core::store::SqlContainer& Container::_internal_sql_container() const {
  const ::syft::core::store::SqlContainer* p = sql_container_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::store::SqlContainer&>(
      ::syft::core::store::_SqlContainer_default_instance_);
}
inline const ::syft::core::store::SqlContainer& Container::sql_container() const {
  // @@protoc_insertion_point(field_get:syft.core.store.Container.sql_container)
  return _internal_sql_container();
}
inline void Container::unsafe_arena_set_allocated_sql_container(
    ::syft::core::store::SqlContainer* sql_container) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sql_container_);
  }
  sql_container_ = sql_container;
  if (sql_container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.Container.sql_container)
}
inline ::syft::core::store::SqlContainer* Container::release_sql_container() {
  
  ::syft::core::store::SqlContainer* temp = sql_container_;
  sql_container_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::store::SqlContainer* Container::unsafe_arena_release_sql_container() {
  // @@protoc_insertion_point(field_release:syft.core.store.Container.sql_container)
  
  ::syft::core::store::SqlContainer* temp = sql_container_;
  sql_container_ = nullptr;
  return temp;
}
inline ::syft::core::store::SqlContainer* Container::_internal_mutable_sql_container() {
  
  if (sql_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::store::SqlContainer>(GetArena());
    sql_container_ = p;
  }
  return sql_container_;
}
inline ::syft::core::store::SqlContainer* Container::mutable_sql_container() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.Container.sql_container)
  return _internal_mutable_sql_container();
}
inline void Container::set_allocated_sql_container(::syft::core::store::SqlContainer* sql_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sql_container_;
  }
  if (sql_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sql_container);
    if (message_arena != submessage_arena) {
      sql_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sql_container, submessage_arena);
    }
    
  } else {
    
  }
  sql_container_ = sql_container;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.Container.sql_container)
}

// .syft.core.store.GridContainer grid_container = 3;
inline bool Container::_internal_has_grid_container() const {
  return this != internal_default_instance() && grid_container_ != nullptr;
}
inline bool Container::has_grid_container() const {
  return _internal_has_grid_container();
}
inline void Container::clear_grid_container() {
  if (GetArena() == nullptr && grid_container_ != nullptr) {
    delete grid_container_;
  }
  grid_container_ = nullptr;
}
inline const ::syft::core::store::GridContainer& Container::_internal_grid_container() const {
  const ::syft::core::store::GridContainer* p = grid_container_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::store::GridContainer&>(
      ::syft::core::store::_GridContainer_default_instance_);
}
inline const ::syft::core::store::GridContainer& Container::grid_container() const {
  // @@protoc_insertion_point(field_get:syft.core.store.Container.grid_container)
  return _internal_grid_container();
}
inline void Container::unsafe_arena_set_allocated_grid_container(
    ::syft::core::store::GridContainer* grid_container) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_container_);
  }
  grid_container_ = grid_container;
  if (grid_container) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.store.Container.grid_container)
}
inline ::syft::core::store::GridContainer* Container::release_grid_container() {
  
  ::syft::core::store::GridContainer* temp = grid_container_;
  grid_container_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::store::GridContainer* Container::unsafe_arena_release_grid_container() {
  // @@protoc_insertion_point(field_release:syft.core.store.Container.grid_container)
  
  ::syft::core::store::GridContainer* temp = grid_container_;
  grid_container_ = nullptr;
  return temp;
}
inline ::syft::core::store::GridContainer* Container::_internal_mutable_grid_container() {
  
  if (grid_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::store::GridContainer>(GetArena());
    grid_container_ = p;
  }
  return grid_container_;
}
inline ::syft::core::store::GridContainer* Container::mutable_grid_container() {
  // @@protoc_insertion_point(field_mutable:syft.core.store.Container.grid_container)
  return _internal_mutable_grid_container();
}
inline void Container::set_allocated_grid_container(::syft::core::store::GridContainer* grid_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grid_container_;
  }
  if (grid_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grid_container);
    if (message_arena != submessage_arena) {
      grid_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid_container, submessage_arena);
    }
    
  } else {
    
  }
  grid_container_ = grid_container;
  // @@protoc_insertion_point(field_set_allocated:syft.core.store.Container.grid_container)
}

// -------------------------------------------------------------------

// SearchEngine

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DictContainer

// map<int64, .google.protobuf.Any> dict_mapping = 1;
inline int DictContainer::_internal_dict_mapping_size() const {
  return dict_mapping_.size();
}
inline int DictContainer::dict_mapping_size() const {
  return _internal_dict_mapping_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >&
DictContainer::_internal_dict_mapping() const {
  return dict_mapping_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >&
DictContainer::dict_mapping() const {
  // @@protoc_insertion_point(field_map:syft.core.store.DictContainer.dict_mapping)
  return _internal_dict_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >*
DictContainer::_internal_mutable_dict_mapping() {
  return dict_mapping_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, PROTOBUF_NAMESPACE_ID::Any >*
DictContainer::mutable_dict_mapping() {
  // @@protoc_insertion_point(field_mutable_map:syft.core.store.DictContainer.dict_mapping)
  return _internal_mutable_dict_mapping();
}

// -------------------------------------------------------------------

// SqlContainer

// -------------------------------------------------------------------

// GridContainer

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace store
}  // namespace core
}  // namespace syft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fstore_2fstore_5fobject_2eproto
