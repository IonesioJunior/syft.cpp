// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/core/io/address.proto

#include "proto/core/io/address.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fcore_2fio_2flocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpecificLocation_proto_2fcore_2fio_2flocation_2eproto;
namespace syft {
namespace core {
namespace io {
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
}  // namespace io
}  // namespace core
}  // namespace syft
static void InitDefaultsscc_info_Address_proto_2fcore_2fio_2faddress_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syft::core::io::_Address_default_instance_;
    new (ptr) ::syft::core::io::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_proto_2fcore_2fio_2faddress_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Address_proto_2fcore_2fio_2faddress_2eproto}, {
      &scc_info_SpecificLocation_proto_2fcore_2fio_2flocation_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fcore_2fio_2faddress_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fcore_2fio_2faddress_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fcore_2fio_2faddress_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fcore_2fio_2faddress_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, name_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, obj_type_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, has_network_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, network_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, has_domain_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, domain_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, has_device_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, device_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, has_vm_),
  PROTOBUF_FIELD_OFFSET(::syft::core::io::Address, vm_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::syft::core::io::Address)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syft::core::io::_Address_default_instance_),
};

const char descriptor_table_protodef_proto_2fcore_2fio_2faddress_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033proto/core/io/address.proto\022\014syft.core"
  ".io\032\034proto/core/io/location.proto\"\263\002\n\007Ad"
  "dress\022\014\n\004name\030\001 \001(\t\022\020\n\010obj_type\030\002 \001(\t\022\023\n"
  "\013has_network\030\003 \001(\010\022/\n\007network\030\004 \001(\0132\036.sy"
  "ft.core.io.SpecificLocation\022\022\n\nhas_domai"
  "n\030\005 \001(\010\022.\n\006domain\030\006 \001(\0132\036.syft.core.io.S"
  "pecificLocation\022\022\n\nhas_device\030\007 \001(\010\022.\n\006d"
  "evice\030\010 \001(\0132\036.syft.core.io.SpecificLocat"
  "ion\022\016\n\006has_vm\030\t \001(\010\022*\n\002vm\030\n \001(\0132\036.syft.c"
  "ore.io.SpecificLocationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fcore_2fio_2faddress_2eproto_deps[1] = {
  &::descriptor_table_proto_2fcore_2fio_2flocation_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fcore_2fio_2faddress_2eproto_sccs[1] = {
  &scc_info_Address_proto_2fcore_2fio_2faddress_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fcore_2fio_2faddress_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcore_2fio_2faddress_2eproto = {
  false, false, descriptor_table_protodef_proto_2fcore_2fio_2faddress_2eproto, "proto/core/io/address.proto", 391,
  &descriptor_table_proto_2fcore_2fio_2faddress_2eproto_once, descriptor_table_proto_2fcore_2fio_2faddress_2eproto_sccs, descriptor_table_proto_2fcore_2fio_2faddress_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_proto_2fcore_2fio_2faddress_2eproto::offsets,
  file_level_metadata_proto_2fcore_2fio_2faddress_2eproto, 1, file_level_enum_descriptors_proto_2fcore_2fio_2faddress_2eproto, file_level_service_descriptors_proto_2fcore_2fio_2faddress_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fcore_2fio_2faddress_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fcore_2fio_2faddress_2eproto)), true);
namespace syft {
namespace core {
namespace io {

// ===================================================================

class Address::_Internal {
 public:
  static const ::syft::core::io::SpecificLocation& network(const Address* msg);
  static const ::syft::core::io::SpecificLocation& domain(const Address* msg);
  static const ::syft::core::io::SpecificLocation& device(const Address* msg);
  static const ::syft::core::io::SpecificLocation& vm(const Address* msg);
};

const ::syft::core::io::SpecificLocation&
Address::_Internal::network(const Address* msg) {
  return *msg->network_;
}
const ::syft::core::io::SpecificLocation&
Address::_Internal::domain(const Address* msg) {
  return *msg->domain_;
}
const ::syft::core::io::SpecificLocation&
Address::_Internal::device(const Address* msg) {
  return *msg->device_;
}
const ::syft::core::io::SpecificLocation&
Address::_Internal::vm(const Address* msg) {
  return *msg->vm_;
}
void Address::clear_network() {
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
void Address::clear_domain() {
  if (GetArena() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
}
void Address::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
void Address::clear_vm() {
  if (GetArena() == nullptr && vm_ != nullptr) {
    delete vm_;
  }
  vm_ = nullptr;
}
Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syft.core.io.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  obj_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj_type().empty()) {
    obj_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obj_type(),
      GetArena());
  }
  if (from._internal_has_network()) {
    network_ = new ::syft::core::io::SpecificLocation(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_domain()) {
    domain_ = new ::syft::core::io::SpecificLocation(*from.domain_);
  } else {
    domain_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::syft::core::io::SpecificLocation(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_vm()) {
    vm_ = new ::syft::core::io::SpecificLocation(*from.vm_);
  } else {
    vm_ = nullptr;
  }
  ::memcpy(&has_network_, &from.has_network_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_vm_) -
    reinterpret_cast<char*>(&has_network_)) + sizeof(has_vm_));
  // @@protoc_insertion_point(copy_constructor:syft.core.io.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_proto_2fcore_2fio_2faddress_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_vm_) -
      reinterpret_cast<char*>(&network_)) + sizeof(has_vm_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:syft.core.io.Address)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete domain_;
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete vm_;
}

void Address::ArenaDtor(void* object) {
  Address* _this = reinterpret_cast< Address* >(object);
  (void)_this;
}
void Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_proto_2fcore_2fio_2faddress_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:syft.core.io.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  obj_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  if (GetArena() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArena() == nullptr && vm_ != nullptr) {
    delete vm_;
  }
  vm_ = nullptr;
  ::memset(&has_network_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_vm_) -
      reinterpret_cast<char*>(&has_network_)) + sizeof(has_vm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syft.core.io.Address.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string obj_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_obj_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syft.core.io.Address.obj_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_network = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syft.core.io.SpecificLocation network = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_domain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          has_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syft.core.io.SpecificLocation domain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_domain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          has_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syft.core.io.SpecificLocation device = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_vm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          has_vm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syft.core.io.SpecificLocation vm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_vm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syft.core.io.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syft.core.io.Address.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string obj_type = 2;
  if (this->obj_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obj_type().data(), static_cast<int>(this->_internal_obj_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syft.core.io.Address.obj_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_obj_type(), target);
  }

  // bool has_network = 3;
  if (this->has_network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_network(), target);
  }

  // .syft.core.io.SpecificLocation network = 4;
  if (this->has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::network(this), target, stream);
  }

  // bool has_domain = 5;
  if (this->has_domain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_domain(), target);
  }

  // .syft.core.io.SpecificLocation domain = 6;
  if (this->has_domain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::domain(this), target, stream);
  }

  // bool has_device = 7;
  if (this->has_device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_device(), target);
  }

  // .syft.core.io.SpecificLocation device = 8;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::device(this), target, stream);
  }

  // bool has_vm = 9;
  if (this->has_vm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_has_vm(), target);
  }

  // .syft.core.io.SpecificLocation vm = 10;
  if (this->has_vm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::vm(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syft.core.io.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syft.core.io.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string obj_type = 2;
  if (this->obj_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_type());
  }

  // .syft.core.io.SpecificLocation network = 4;
  if (this->has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // .syft.core.io.SpecificLocation domain = 6;
  if (this->has_domain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *domain_);
  }

  // .syft.core.io.SpecificLocation device = 8;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .syft.core.io.SpecificLocation vm = 10;
  if (this->has_vm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vm_);
  }

  // bool has_network = 3;
  if (this->has_network() != 0) {
    total_size += 1 + 1;
  }

  // bool has_domain = 5;
  if (this->has_domain() != 0) {
    total_size += 1 + 1;
  }

  // bool has_device = 7;
  if (this->has_device() != 0) {
    total_size += 1 + 1;
  }

  // bool has_vm = 9;
  if (this->has_vm() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syft.core.io.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syft.core.io.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syft.core.io.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syft.core.io.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.obj_type().size() > 0) {
    _internal_set_obj_type(from._internal_obj_type());
  }
  if (from.has_network()) {
    _internal_mutable_network()->::syft::core::io::SpecificLocation::MergeFrom(from._internal_network());
  }
  if (from.has_domain()) {
    _internal_mutable_domain()->::syft::core::io::SpecificLocation::MergeFrom(from._internal_domain());
  }
  if (from.has_device()) {
    _internal_mutable_device()->::syft::core::io::SpecificLocation::MergeFrom(from._internal_device());
  }
  if (from.has_vm()) {
    _internal_mutable_vm()->::syft::core::io::SpecificLocation::MergeFrom(from._internal_vm());
  }
  if (from.has_network() != 0) {
    _internal_set_has_network(from._internal_has_network());
  }
  if (from.has_domain() != 0) {
    _internal_set_has_domain(from._internal_has_domain());
  }
  if (from.has_device() != 0) {
    _internal_set_has_device(from._internal_has_device());
  }
  if (from.has_vm() != 0) {
    _internal_set_has_vm(from._internal_has_vm());
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syft.core.io.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syft.core.io.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  obj_type_.Swap(&other->obj_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Address, has_vm_)
      + sizeof(Address::has_vm_)
      - PROTOBUF_FIELD_OFFSET(Address, network_)>(
          reinterpret_cast<char*>(&network_),
          reinterpret_cast<char*>(&other->network_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace io
}  // namespace core
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::syft::core::io::Address* Arena::CreateMaybeMessage< ::syft::core::io::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syft::core::io::Address >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
