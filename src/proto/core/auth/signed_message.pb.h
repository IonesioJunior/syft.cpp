// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/core/auth/signed_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/core/common/common_object.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto;
namespace syft {
namespace core {
namespace auth {
class SignedMessage;
class SignedMessageDefaultTypeInternal;
extern SignedMessageDefaultTypeInternal _SignedMessage_default_instance_;
}  // namespace auth
}  // namespace core
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> ::syft::core::auth::SignedMessage* Arena::CreateMaybeMessage<::syft::core::auth::SignedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syft {
namespace core {
namespace auth {

// ===================================================================

class SignedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.auth.SignedMessage) */ {
 public:
  inline SignedMessage() : SignedMessage(nullptr) {}
  virtual ~SignedMessage();

  SignedMessage(const SignedMessage& from);
  SignedMessage(SignedMessage&& from) noexcept
    : SignedMessage() {
    *this = ::std::move(from);
  }

  inline SignedMessage& operator=(const SignedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedMessage& operator=(SignedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedMessage& default_instance();

  static inline const SignedMessage* internal_default_instance() {
    return reinterpret_cast<const SignedMessage*>(
               &_SignedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignedMessage& a, SignedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedMessage* New() const final {
    return CreateMaybeMessage<SignedMessage>(nullptr);
  }

  SignedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedMessage& from);
  void MergeFrom(const SignedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.auth.SignedMessage";
  }
  protected:
  explicit SignedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto);
    return ::descriptor_table_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjTypeFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kVerifyKeyFieldNumber = 4,
    kMessageFieldNumber = 5,
    kMsgIdFieldNumber = 1,
  };
  // string obj_type = 2;
  void clear_obj_type();
  const std::string& obj_type() const;
  void set_obj_type(const std::string& value);
  void set_obj_type(std::string&& value);
  void set_obj_type(const char* value);
  void set_obj_type(const char* value, size_t size);
  std::string* mutable_obj_type();
  std::string* release_obj_type();
  void set_allocated_obj_type(std::string* obj_type);
  private:
  const std::string& _internal_obj_type() const;
  void _internal_set_obj_type(const std::string& value);
  std::string* _internal_mutable_obj_type();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes verify_key = 4;
  void clear_verify_key();
  const std::string& verify_key() const;
  void set_verify_key(const std::string& value);
  void set_verify_key(std::string&& value);
  void set_verify_key(const char* value);
  void set_verify_key(const void* value, size_t size);
  std::string* mutable_verify_key();
  std::string* release_verify_key();
  void set_allocated_verify_key(std::string* verify_key);
  private:
  const std::string& _internal_verify_key() const;
  void _internal_set_verify_key(const std::string& value);
  std::string* _internal_mutable_verify_key();
  public:

  // bytes message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .syft.core.common.UID msg_id = 1;
  bool has_msg_id() const;
  private:
  bool _internal_has_msg_id() const;
  public:
  void clear_msg_id();
  const ::syft::core::common::UID& msg_id() const;
  ::syft::core::common::UID* release_msg_id();
  ::syft::core::common::UID* mutable_msg_id();
  void set_allocated_msg_id(::syft::core::common::UID* msg_id);
  private:
  const ::syft::core::common::UID& _internal_msg_id() const;
  ::syft::core::common::UID* _internal_mutable_msg_id();
  public:
  void unsafe_arena_set_allocated_msg_id(
      ::syft::core::common::UID* msg_id);
  ::syft::core::common::UID* unsafe_arena_release_msg_id();

  // @@protoc_insertion_point(class_scope:syft.core.auth.SignedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::syft::core::common::UID* msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignedMessage

// .syft.core.common.UID msg_id = 1;
inline bool SignedMessage::_internal_has_msg_id() const {
  return this != internal_default_instance() && msg_id_ != nullptr;
}
inline bool SignedMessage::has_msg_id() const {
  return _internal_has_msg_id();
}
inline const ::syft::core::common::UID& SignedMessage::_internal_msg_id() const {
  const ::syft::core::common::UID* p = msg_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::common::UID&>(
      ::syft::core::common::_UID_default_instance_);
}
inline const ::syft::core::common::UID& SignedMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:syft.core.auth.SignedMessage.msg_id)
  return _internal_msg_id();
}
inline void SignedMessage::unsafe_arena_set_allocated_msg_id(
    ::syft::core::common::UID* msg_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_id_);
  }
  msg_id_ = msg_id;
  if (msg_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.auth.SignedMessage.msg_id)
}
inline ::syft::core::common::UID* SignedMessage::release_msg_id() {
  
  ::syft::core::common::UID* temp = msg_id_;
  msg_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::common::UID* SignedMessage::unsafe_arena_release_msg_id() {
  // @@protoc_insertion_point(field_release:syft.core.auth.SignedMessage.msg_id)
  
  ::syft::core::common::UID* temp = msg_id_;
  msg_id_ = nullptr;
  return temp;
}
inline ::syft::core::common::UID* SignedMessage::_internal_mutable_msg_id() {
  
  if (msg_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::common::UID>(GetArena());
    msg_id_ = p;
  }
  return msg_id_;
}
inline ::syft::core::common::UID* SignedMessage::mutable_msg_id() {
  // @@protoc_insertion_point(field_mutable:syft.core.auth.SignedMessage.msg_id)
  return _internal_mutable_msg_id();
}
inline void SignedMessage::set_allocated_msg_id(::syft::core::common::UID* msg_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_id_);
  }
  if (msg_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_id)->GetArena();
    if (message_arena != submessage_arena) {
      msg_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_id, submessage_arena);
    }
    
  } else {
    
  }
  msg_id_ = msg_id;
  // @@protoc_insertion_point(field_set_allocated:syft.core.auth.SignedMessage.msg_id)
}

// string obj_type = 2;
inline void SignedMessage::clear_obj_type() {
  obj_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignedMessage::obj_type() const {
  // @@protoc_insertion_point(field_get:syft.core.auth.SignedMessage.obj_type)
  return _internal_obj_type();
}
inline void SignedMessage::set_obj_type(const std::string& value) {
  _internal_set_obj_type(value);
  // @@protoc_insertion_point(field_set:syft.core.auth.SignedMessage.obj_type)
}
inline std::string* SignedMessage::mutable_obj_type() {
  // @@protoc_insertion_point(field_mutable:syft.core.auth.SignedMessage.obj_type)
  return _internal_mutable_obj_type();
}
inline const std::string& SignedMessage::_internal_obj_type() const {
  return obj_type_.Get();
}
inline void SignedMessage::_internal_set_obj_type(const std::string& value) {
  
  obj_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignedMessage::set_obj_type(std::string&& value) {
  
  obj_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.auth.SignedMessage.obj_type)
}
inline void SignedMessage::set_obj_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.auth.SignedMessage.obj_type)
}
inline void SignedMessage::set_obj_type(const char* value,
    size_t size) {
  
  obj_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.auth.SignedMessage.obj_type)
}
inline std::string* SignedMessage::_internal_mutable_obj_type() {
  
  return obj_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignedMessage::release_obj_type() {
  // @@protoc_insertion_point(field_release:syft.core.auth.SignedMessage.obj_type)
  return obj_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedMessage::set_allocated_obj_type(std::string* obj_type) {
  if (obj_type != nullptr) {
    
  } else {
    
  }
  obj_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.auth.SignedMessage.obj_type)
}

// bytes signature = 3;
inline void SignedMessage::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignedMessage::signature() const {
  // @@protoc_insertion_point(field_get:syft.core.auth.SignedMessage.signature)
  return _internal_signature();
}
inline void SignedMessage::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:syft.core.auth.SignedMessage.signature)
}
inline std::string* SignedMessage::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:syft.core.auth.SignedMessage.signature)
  return _internal_mutable_signature();
}
inline const std::string& SignedMessage::_internal_signature() const {
  return signature_.Get();
}
inline void SignedMessage::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignedMessage::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.auth.SignedMessage.signature)
}
inline void SignedMessage::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.auth.SignedMessage.signature)
}
inline void SignedMessage::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.auth.SignedMessage.signature)
}
inline std::string* SignedMessage::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignedMessage::release_signature() {
  // @@protoc_insertion_point(field_release:syft.core.auth.SignedMessage.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedMessage::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.auth.SignedMessage.signature)
}

// bytes verify_key = 4;
inline void SignedMessage::clear_verify_key() {
  verify_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignedMessage::verify_key() const {
  // @@protoc_insertion_point(field_get:syft.core.auth.SignedMessage.verify_key)
  return _internal_verify_key();
}
inline void SignedMessage::set_verify_key(const std::string& value) {
  _internal_set_verify_key(value);
  // @@protoc_insertion_point(field_set:syft.core.auth.SignedMessage.verify_key)
}
inline std::string* SignedMessage::mutable_verify_key() {
  // @@protoc_insertion_point(field_mutable:syft.core.auth.SignedMessage.verify_key)
  return _internal_mutable_verify_key();
}
inline const std::string& SignedMessage::_internal_verify_key() const {
  return verify_key_.Get();
}
inline void SignedMessage::_internal_set_verify_key(const std::string& value) {
  
  verify_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignedMessage::set_verify_key(std::string&& value) {
  
  verify_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.auth.SignedMessage.verify_key)
}
inline void SignedMessage::set_verify_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  verify_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.auth.SignedMessage.verify_key)
}
inline void SignedMessage::set_verify_key(const void* value,
    size_t size) {
  
  verify_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.auth.SignedMessage.verify_key)
}
inline std::string* SignedMessage::_internal_mutable_verify_key() {
  
  return verify_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignedMessage::release_verify_key() {
  // @@protoc_insertion_point(field_release:syft.core.auth.SignedMessage.verify_key)
  return verify_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedMessage::set_allocated_verify_key(std::string* verify_key) {
  if (verify_key != nullptr) {
    
  } else {
    
  }
  verify_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verify_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.auth.SignedMessage.verify_key)
}

// bytes message = 5;
inline void SignedMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignedMessage::message() const {
  // @@protoc_insertion_point(field_get:syft.core.auth.SignedMessage.message)
  return _internal_message();
}
inline void SignedMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:syft.core.auth.SignedMessage.message)
}
inline std::string* SignedMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:syft.core.auth.SignedMessage.message)
  return _internal_mutable_message();
}
inline const std::string& SignedMessage::_internal_message() const {
  return message_.Get();
}
inline void SignedMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignedMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.auth.SignedMessage.message)
}
inline void SignedMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.auth.SignedMessage.message)
}
inline void SignedMessage::set_message(const void* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.auth.SignedMessage.message)
}
inline std::string* SignedMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignedMessage::release_message() {
  // @@protoc_insertion_point(field_release:syft.core.auth.SignedMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.auth.SignedMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace core
}  // namespace syft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fauth_2fsigned_5fmessage_2eproto
