// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/core/node/domain/service/accept_or_deny_request_message.proto

#include "proto/core/node/domain/service/accept_or_deny_request_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fcore_2fcommon_2fcommon_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UID_proto_2fcore_2fcommon_2fcommon_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fcore_2fio_2faddress_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_proto_2fcore_2fio_2faddress_2eproto;
namespace syft {
namespace core {
namespace node {
namespace domain {
namespace service {
class AcceptOrDenyRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptOrDenyRequestMessage> _instance;
} _AcceptOrDenyRequestMessage_default_instance_;
}  // namespace service
}  // namespace domain
}  // namespace node
}  // namespace core
}  // namespace syft
static void InitDefaultsscc_info_AcceptOrDenyRequestMessage_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syft::core::node::domain::service::_AcceptOrDenyRequestMessage_default_instance_;
    new (ptr) ::syft::core::node::domain::service::AcceptOrDenyRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcceptOrDenyRequestMessage_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AcceptOrDenyRequestMessage_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto}, {
      &scc_info_UID_proto_2fcore_2fcommon_2fcommon_5fobject_2eproto.base,
      &scc_info_Address_proto_2fcore_2fio_2faddress_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syft::core::node::domain::service::AcceptOrDenyRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syft::core::node::domain::service::AcceptOrDenyRequestMessage, msg_id_),
  PROTOBUF_FIELD_OFFSET(::syft::core::node::domain::service::AcceptOrDenyRequestMessage, address_),
  PROTOBUF_FIELD_OFFSET(::syft::core::node::domain::service::AcceptOrDenyRequestMessage, request_id_),
  PROTOBUF_FIELD_OFFSET(::syft::core::node::domain::service::AcceptOrDenyRequestMessage, accept_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::syft::core::node::domain::service::AcceptOrDenyRequestMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syft::core::node::domain::service::_AcceptOrDenyRequestMessage_default_instance_),
};

const char descriptor_table_protodef_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nCproto/core/node/domain/service/accept_"
  "or_deny_request_message.proto\022\035syft.core"
  ".node.domain.service\032%proto/core/common/"
  "common_object.proto\032\033proto/core/io/addre"
  "ss.proto\"\246\001\n\032AcceptOrDenyRequestMessage\022"
  "%\n\006msg_id\030\001 \001(\0132\025.syft.core.common.UID\022&"
  "\n\007address\030\002 \001(\0132\025.syft.core.io.Address\022)"
  "\n\nrequest_id\030\003 \001(\0132\025.syft.core.common.UI"
  "D\022\016\n\006accept\030\004 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto_deps[2] = {
  &::descriptor_table_proto_2fcore_2fcommon_2fcommon_5fobject_2eproto,
  &::descriptor_table_proto_2fcore_2fio_2faddress_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto_sccs[1] = {
  &scc_info_AcceptOrDenyRequestMessage_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto = {
  false, false, descriptor_table_protodef_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto, "proto/core/node/domain/service/accept_or_deny_request_message.proto", 345,
  &descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto_once, descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto_sccs, descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto::offsets,
  file_level_metadata_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto, 1, file_level_enum_descriptors_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto, file_level_service_descriptors_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto)), true);
namespace syft {
namespace core {
namespace node {
namespace domain {
namespace service {

// ===================================================================

class AcceptOrDenyRequestMessage::_Internal {
 public:
  static const ::syft::core::common::UID& msg_id(const AcceptOrDenyRequestMessage* msg);
  static const ::syft::core::io::Address& address(const AcceptOrDenyRequestMessage* msg);
  static const ::syft::core::common::UID& request_id(const AcceptOrDenyRequestMessage* msg);
};

const ::syft::core::common::UID&
AcceptOrDenyRequestMessage::_Internal::msg_id(const AcceptOrDenyRequestMessage* msg) {
  return *msg->msg_id_;
}
const ::syft::core::io::Address&
AcceptOrDenyRequestMessage::_Internal::address(const AcceptOrDenyRequestMessage* msg) {
  return *msg->address_;
}
const ::syft::core::common::UID&
AcceptOrDenyRequestMessage::_Internal::request_id(const AcceptOrDenyRequestMessage* msg) {
  return *msg->request_id_;
}
void AcceptOrDenyRequestMessage::clear_msg_id() {
  if (GetArena() == nullptr && msg_id_ != nullptr) {
    delete msg_id_;
  }
  msg_id_ = nullptr;
}
void AcceptOrDenyRequestMessage::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void AcceptOrDenyRequestMessage::clear_request_id() {
  if (GetArena() == nullptr && request_id_ != nullptr) {
    delete request_id_;
  }
  request_id_ = nullptr;
}
AcceptOrDenyRequestMessage::AcceptOrDenyRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
}
AcceptOrDenyRequestMessage::AcceptOrDenyRequestMessage(const AcceptOrDenyRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg_id()) {
    msg_id_ = new ::syft::core::common::UID(*from.msg_id_);
  } else {
    msg_id_ = nullptr;
  }
  if (from._internal_has_address()) {
    address_ = new ::syft::core::io::Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_request_id()) {
    request_id_ = new ::syft::core::common::UID(*from.request_id_);
  } else {
    request_id_ = nullptr;
  }
  accept_ = from.accept_;
  // @@protoc_insertion_point(copy_constructor:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
}

void AcceptOrDenyRequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcceptOrDenyRequestMessage_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto.base);
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accept_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(accept_));
}

AcceptOrDenyRequestMessage::~AcceptOrDenyRequestMessage() {
  // @@protoc_insertion_point(destructor:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcceptOrDenyRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete msg_id_;
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete request_id_;
}

void AcceptOrDenyRequestMessage::ArenaDtor(void* object) {
  AcceptOrDenyRequestMessage* _this = reinterpret_cast< AcceptOrDenyRequestMessage* >(object);
  (void)_this;
}
void AcceptOrDenyRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcceptOrDenyRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptOrDenyRequestMessage& AcceptOrDenyRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptOrDenyRequestMessage_proto_2fcore_2fnode_2fdomain_2fservice_2faccept_5for_5fdeny_5frequest_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void AcceptOrDenyRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && msg_id_ != nullptr) {
    delete msg_id_;
  }
  msg_id_ = nullptr;
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && request_id_ != nullptr) {
    delete request_id_;
  }
  request_id_ = nullptr;
  accept_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptOrDenyRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .syft.core.common.UID msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syft.core.io.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syft.core.common.UID request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool accept = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptOrDenyRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .syft.core.common.UID msg_id = 1;
  if (this->has_msg_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_id(this), target, stream);
  }

  // .syft.core.io.Address address = 2;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::address(this), target, stream);
  }

  // .syft.core.common.UID request_id = 3;
  if (this->has_request_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::request_id(this), target, stream);
  }

  // bool accept = 4;
  if (this->accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  return target;
}

size_t AcceptOrDenyRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .syft.core.common.UID msg_id = 1;
  if (this->has_msg_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_id_);
  }

  // .syft.core.io.Address address = 2;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .syft.core.common.UID request_id = 3;
  if (this->has_request_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_id_);
  }

  // bool accept = 4;
  if (this->accept() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptOrDenyRequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptOrDenyRequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptOrDenyRequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
    MergeFrom(*source);
  }
}

void AcceptOrDenyRequestMessage::MergeFrom(const AcceptOrDenyRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_id()) {
    _internal_mutable_msg_id()->::syft::core::common::UID::MergeFrom(from._internal_msg_id());
  }
  if (from.has_address()) {
    _internal_mutable_address()->::syft::core::io::Address::MergeFrom(from._internal_address());
  }
  if (from.has_request_id()) {
    _internal_mutable_request_id()->::syft::core::common::UID::MergeFrom(from._internal_request_id());
  }
  if (from.accept() != 0) {
    _internal_set_accept(from._internal_accept());
  }
}

void AcceptOrDenyRequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptOrDenyRequestMessage::CopyFrom(const AcceptOrDenyRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syft.core.node.domain.service.AcceptOrDenyRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptOrDenyRequestMessage::IsInitialized() const {
  return true;
}

void AcceptOrDenyRequestMessage::InternalSwap(AcceptOrDenyRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptOrDenyRequestMessage, accept_)
      + sizeof(AcceptOrDenyRequestMessage::accept_)
      - PROTOBUF_FIELD_OFFSET(AcceptOrDenyRequestMessage, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptOrDenyRequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace domain
}  // namespace node
}  // namespace core
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::syft::core::node::domain::service::AcceptOrDenyRequestMessage* Arena::CreateMaybeMessage< ::syft::core::node::domain::service::AcceptOrDenyRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syft::core::node::domain::service::AcceptOrDenyRequestMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
