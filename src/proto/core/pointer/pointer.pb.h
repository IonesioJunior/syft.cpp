// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/core/pointer/pointer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fpointer_2fpointer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fpointer_2fpointer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/core/common/common_object.pb.h"
#include "proto/core/io/address.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcore_2fpointer_2fpointer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcore_2fpointer_2fpointer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcore_2fpointer_2fpointer_2eproto;
namespace syft {
namespace core {
namespace pointer {
class Pointer;
class PointerDefaultTypeInternal;
extern PointerDefaultTypeInternal _Pointer_default_instance_;
}  // namespace pointer
}  // namespace core
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> ::syft::core::pointer::Pointer* Arena::CreateMaybeMessage<::syft::core::pointer::Pointer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syft {
namespace core {
namespace pointer {

// ===================================================================

class Pointer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.core.pointer.Pointer) */ {
 public:
  inline Pointer() : Pointer(nullptr) {}
  virtual ~Pointer();

  Pointer(const Pointer& from);
  Pointer(Pointer&& from) noexcept
    : Pointer() {
    *this = ::std::move(from);
  }

  inline Pointer& operator=(const Pointer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pointer& operator=(Pointer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pointer& default_instance();

  static inline const Pointer* internal_default_instance() {
    return reinterpret_cast<const Pointer*>(
               &_Pointer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pointer& a, Pointer& b) {
    a.Swap(&b);
  }
  inline void Swap(Pointer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pointer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pointer* New() const final {
    return CreateMaybeMessage<Pointer>(nullptr);
  }

  Pointer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pointer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pointer& from);
  void MergeFrom(const Pointer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pointer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.core.pointer.Pointer";
  }
  protected:
  explicit Pointer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fcore_2fpointer_2fpointer_2eproto);
    return ::descriptor_table_proto_2fcore_2fpointer_2fpointer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kPointsToObjectWithPathFieldNumber = 1,
    kPointerNameFieldNumber = 2,
    kDescriptionFieldNumber = 6,
    kIdAtLocationFieldNumber = 3,
    kLocationFieldNumber = 4,
  };
  // repeated string tags = 5;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string points_to_object_with_path = 1;
  void clear_points_to_object_with_path();
  const std::string& points_to_object_with_path() const;
  void set_points_to_object_with_path(const std::string& value);
  void set_points_to_object_with_path(std::string&& value);
  void set_points_to_object_with_path(const char* value);
  void set_points_to_object_with_path(const char* value, size_t size);
  std::string* mutable_points_to_object_with_path();
  std::string* release_points_to_object_with_path();
  void set_allocated_points_to_object_with_path(std::string* points_to_object_with_path);
  private:
  const std::string& _internal_points_to_object_with_path() const;
  void _internal_set_points_to_object_with_path(const std::string& value);
  std::string* _internal_mutable_points_to_object_with_path();
  public:

  // string pointer_name = 2;
  void clear_pointer_name();
  const std::string& pointer_name() const;
  void set_pointer_name(const std::string& value);
  void set_pointer_name(std::string&& value);
  void set_pointer_name(const char* value);
  void set_pointer_name(const char* value, size_t size);
  std::string* mutable_pointer_name();
  std::string* release_pointer_name();
  void set_allocated_pointer_name(std::string* pointer_name);
  private:
  const std::string& _internal_pointer_name() const;
  void _internal_set_pointer_name(const std::string& value);
  std::string* _internal_mutable_pointer_name();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .syft.core.common.UID id_at_location = 3;
  bool has_id_at_location() const;
  private:
  bool _internal_has_id_at_location() const;
  public:
  void clear_id_at_location();
  const ::syft::core::common::UID& id_at_location() const;
  ::syft::core::common::UID* release_id_at_location();
  ::syft::core::common::UID* mutable_id_at_location();
  void set_allocated_id_at_location(::syft::core::common::UID* id_at_location);
  private:
  const ::syft::core::common::UID& _internal_id_at_location() const;
  ::syft::core::common::UID* _internal_mutable_id_at_location();
  public:
  void unsafe_arena_set_allocated_id_at_location(
      ::syft::core::common::UID* id_at_location);
  ::syft::core::common::UID* unsafe_arena_release_id_at_location();

  // .syft.core.io.Address location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::syft::core::io::Address& location() const;
  ::syft::core::io::Address* release_location();
  ::syft::core::io::Address* mutable_location();
  void set_allocated_location(::syft::core::io::Address* location);
  private:
  const ::syft::core::io::Address& _internal_location() const;
  ::syft::core::io::Address* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::syft::core::io::Address* location);
  ::syft::core::io::Address* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:syft.core.pointer.Pointer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_to_object_with_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::syft::core::common::UID* id_at_location_;
  ::syft::core::io::Address* location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcore_2fpointer_2fpointer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pointer

// string points_to_object_with_path = 1;
inline void Pointer::clear_points_to_object_with_path() {
  points_to_object_with_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pointer::points_to_object_with_path() const {
  // @@protoc_insertion_point(field_get:syft.core.pointer.Pointer.points_to_object_with_path)
  return _internal_points_to_object_with_path();
}
inline void Pointer::set_points_to_object_with_path(const std::string& value) {
  _internal_set_points_to_object_with_path(value);
  // @@protoc_insertion_point(field_set:syft.core.pointer.Pointer.points_to_object_with_path)
}
inline std::string* Pointer::mutable_points_to_object_with_path() {
  // @@protoc_insertion_point(field_mutable:syft.core.pointer.Pointer.points_to_object_with_path)
  return _internal_mutable_points_to_object_with_path();
}
inline const std::string& Pointer::_internal_points_to_object_with_path() const {
  return points_to_object_with_path_.Get();
}
inline void Pointer::_internal_set_points_to_object_with_path(const std::string& value) {
  
  points_to_object_with_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pointer::set_points_to_object_with_path(std::string&& value) {
  
  points_to_object_with_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.pointer.Pointer.points_to_object_with_path)
}
inline void Pointer::set_points_to_object_with_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_to_object_with_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.pointer.Pointer.points_to_object_with_path)
}
inline void Pointer::set_points_to_object_with_path(const char* value,
    size_t size) {
  
  points_to_object_with_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.pointer.Pointer.points_to_object_with_path)
}
inline std::string* Pointer::_internal_mutable_points_to_object_with_path() {
  
  return points_to_object_with_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pointer::release_points_to_object_with_path() {
  // @@protoc_insertion_point(field_release:syft.core.pointer.Pointer.points_to_object_with_path)
  return points_to_object_with_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pointer::set_allocated_points_to_object_with_path(std::string* points_to_object_with_path) {
  if (points_to_object_with_path != nullptr) {
    
  } else {
    
  }
  points_to_object_with_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points_to_object_with_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.pointer.Pointer.points_to_object_with_path)
}

// string pointer_name = 2;
inline void Pointer::clear_pointer_name() {
  pointer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pointer::pointer_name() const {
  // @@protoc_insertion_point(field_get:syft.core.pointer.Pointer.pointer_name)
  return _internal_pointer_name();
}
inline void Pointer::set_pointer_name(const std::string& value) {
  _internal_set_pointer_name(value);
  // @@protoc_insertion_point(field_set:syft.core.pointer.Pointer.pointer_name)
}
inline std::string* Pointer::mutable_pointer_name() {
  // @@protoc_insertion_point(field_mutable:syft.core.pointer.Pointer.pointer_name)
  return _internal_mutable_pointer_name();
}
inline const std::string& Pointer::_internal_pointer_name() const {
  return pointer_name_.Get();
}
inline void Pointer::_internal_set_pointer_name(const std::string& value) {
  
  pointer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pointer::set_pointer_name(std::string&& value) {
  
  pointer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.pointer.Pointer.pointer_name)
}
inline void Pointer::set_pointer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pointer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.pointer.Pointer.pointer_name)
}
inline void Pointer::set_pointer_name(const char* value,
    size_t size) {
  
  pointer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.pointer.Pointer.pointer_name)
}
inline std::string* Pointer::_internal_mutable_pointer_name() {
  
  return pointer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pointer::release_pointer_name() {
  // @@protoc_insertion_point(field_release:syft.core.pointer.Pointer.pointer_name)
  return pointer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pointer::set_allocated_pointer_name(std::string* pointer_name) {
  if (pointer_name != nullptr) {
    
  } else {
    
  }
  pointer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.pointer.Pointer.pointer_name)
}

// .syft.core.common.UID id_at_location = 3;
inline bool Pointer::_internal_has_id_at_location() const {
  return this != internal_default_instance() && id_at_location_ != nullptr;
}
inline bool Pointer::has_id_at_location() const {
  return _internal_has_id_at_location();
}
inline const ::syft::core::common::UID& Pointer::_internal_id_at_location() const {
  const ::syft::core::common::UID* p = id_at_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::common::UID&>(
      ::syft::core::common::_UID_default_instance_);
}
inline const ::syft::core::common::UID& Pointer::id_at_location() const {
  // @@protoc_insertion_point(field_get:syft.core.pointer.Pointer.id_at_location)
  return _internal_id_at_location();
}
inline void Pointer::unsafe_arena_set_allocated_id_at_location(
    ::syft::core::common::UID* id_at_location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_at_location_);
  }
  id_at_location_ = id_at_location;
  if (id_at_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.pointer.Pointer.id_at_location)
}
inline ::syft::core::common::UID* Pointer::release_id_at_location() {
  
  ::syft::core::common::UID* temp = id_at_location_;
  id_at_location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::common::UID* Pointer::unsafe_arena_release_id_at_location() {
  // @@protoc_insertion_point(field_release:syft.core.pointer.Pointer.id_at_location)
  
  ::syft::core::common::UID* temp = id_at_location_;
  id_at_location_ = nullptr;
  return temp;
}
inline ::syft::core::common::UID* Pointer::_internal_mutable_id_at_location() {
  
  if (id_at_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::common::UID>(GetArena());
    id_at_location_ = p;
  }
  return id_at_location_;
}
inline ::syft::core::common::UID* Pointer::mutable_id_at_location() {
  // @@protoc_insertion_point(field_mutable:syft.core.pointer.Pointer.id_at_location)
  return _internal_mutable_id_at_location();
}
inline void Pointer::set_allocated_id_at_location(::syft::core::common::UID* id_at_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_at_location_);
  }
  if (id_at_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_at_location)->GetArena();
    if (message_arena != submessage_arena) {
      id_at_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_at_location, submessage_arena);
    }
    
  } else {
    
  }
  id_at_location_ = id_at_location;
  // @@protoc_insertion_point(field_set_allocated:syft.core.pointer.Pointer.id_at_location)
}

// .syft.core.io.Address location = 4;
inline bool Pointer::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Pointer::has_location() const {
  return _internal_has_location();
}
inline const ::syft::core::io::Address& Pointer::_internal_location() const {
  const ::syft::core::io::Address* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::io::Address&>(
      ::syft::core::io::_Address_default_instance_);
}
inline const ::syft::core::io::Address& Pointer::location() const {
  // @@protoc_insertion_point(field_get:syft.core.pointer.Pointer.location)
  return _internal_location();
}
inline void Pointer::unsafe_arena_set_allocated_location(
    ::syft::core::io::Address* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.core.pointer.Pointer.location)
}
inline ::syft::core::io::Address* Pointer::release_location() {
  
  ::syft::core::io::Address* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::io::Address* Pointer::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:syft.core.pointer.Pointer.location)
  
  ::syft::core::io::Address* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::syft::core::io::Address* Pointer::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::io::Address>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::syft::core::io::Address* Pointer::mutable_location() {
  // @@protoc_insertion_point(field_mutable:syft.core.pointer.Pointer.location)
  return _internal_mutable_location();
}
inline void Pointer::set_allocated_location(::syft::core::io::Address* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location)->GetArena();
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:syft.core.pointer.Pointer.location)
}

// repeated string tags = 5;
inline int Pointer::_internal_tags_size() const {
  return tags_.size();
}
inline int Pointer::tags_size() const {
  return _internal_tags_size();
}
inline void Pointer::clear_tags() {
  tags_.Clear();
}
inline std::string* Pointer::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:syft.core.pointer.Pointer.tags)
  return _internal_add_tags();
}
inline const std::string& Pointer::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Pointer::tags(int index) const {
  // @@protoc_insertion_point(field_get:syft.core.pointer.Pointer.tags)
  return _internal_tags(index);
}
inline std::string* Pointer::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:syft.core.pointer.Pointer.tags)
  return tags_.Mutable(index);
}
inline void Pointer::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:syft.core.pointer.Pointer.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Pointer::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:syft.core.pointer.Pointer.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Pointer::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:syft.core.pointer.Pointer.tags)
}
inline void Pointer::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:syft.core.pointer.Pointer.tags)
}
inline std::string* Pointer::_internal_add_tags() {
  return tags_.Add();
}
inline void Pointer::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:syft.core.pointer.Pointer.tags)
}
inline void Pointer::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:syft.core.pointer.Pointer.tags)
}
inline void Pointer::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:syft.core.pointer.Pointer.tags)
}
inline void Pointer::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:syft.core.pointer.Pointer.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pointer::tags() const {
  // @@protoc_insertion_point(field_list:syft.core.pointer.Pointer.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pointer::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:syft.core.pointer.Pointer.tags)
  return &tags_;
}

// string description = 6;
inline void Pointer::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pointer::description() const {
  // @@protoc_insertion_point(field_get:syft.core.pointer.Pointer.description)
  return _internal_description();
}
inline void Pointer::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:syft.core.pointer.Pointer.description)
}
inline std::string* Pointer::mutable_description() {
  // @@protoc_insertion_point(field_mutable:syft.core.pointer.Pointer.description)
  return _internal_mutable_description();
}
inline const std::string& Pointer::_internal_description() const {
  return description_.Get();
}
inline void Pointer::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pointer::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.core.pointer.Pointer.description)
}
inline void Pointer::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.core.pointer.Pointer.description)
}
inline void Pointer::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.core.pointer.Pointer.description)
}
inline std::string* Pointer::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pointer::release_description() {
  // @@protoc_insertion_point(field_release:syft.core.pointer.Pointer.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pointer::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.core.pointer.Pointer.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pointer
}  // namespace core
}  // namespace syft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcore_2fpointer_2fpointer_2eproto
