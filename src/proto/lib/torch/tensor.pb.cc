// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/lib/torch/tensor.proto

#include "proto/lib/torch/tensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2flib_2ftorch_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto;
namespace syft {
namespace lib {
namespace torch {
class TensorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorData> _instance;
} _TensorData_default_instance_;
class TensorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorProto> _instance;
} _TensorProto_default_instance_;
}  // namespace torch
}  // namespace lib
}  // namespace syft
static void InitDefaultsscc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syft::lib::torch::_TensorData_default_instance_;
    new (ptr) ::syft::lib::torch::TensorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto}, {}};

static void InitDefaultsscc_info_TensorProto_proto_2flib_2ftorch_2ftensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syft::lib::torch::_TensorProto_default_instance_;
    new (ptr) ::syft::lib::torch::TensorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorProto_proto_2flib_2ftorch_2ftensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TensorProto_proto_2flib_2ftorch_2ftensor_2eproto}, {
      &scc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2flib_2ftorch_2ftensor_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2flib_2ftorch_2ftensor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2flib_2ftorch_2ftensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2flib_2ftorch_2ftensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, shape_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, dtype_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, is_quantized_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, scale_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, zero_point_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_uint8_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_int8_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_int16_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_int32_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_int64_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_float16_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_float32_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_float64_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_bool_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_qint8_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_quint8_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_qint32_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorData, contents_bfloat16_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorProto, tensor_),
  PROTOBUF_FIELD_OFFSET(::syft::lib::torch::TensorProto, grad_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::syft::lib::torch::TensorData)},
  { 23, -1, sizeof(::syft::lib::torch::TensorProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syft::lib::torch::_TensorData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syft::lib::torch::_TensorProto_default_instance_),
};

const char descriptor_table_protodef_proto_2flib_2ftorch_2ftensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034proto/lib/torch/tensor.proto\022\016syft.lib"
  ".torch\"\244\003\n\nTensorData\022\r\n\005shape\030\001 \003(\003\022\r\n\005"
  "dtype\030\002 \001(\t\022\024\n\014is_quantized\030\003 \001(\010\022\r\n\005sca"
  "le\030\004 \001(\002\022\022\n\nzero_point\030\005 \001(\005\022\026\n\016contents"
  "_uint8\030\020 \003(\r\022\025\n\rcontents_int8\030\021 \003(\005\022\026\n\016c"
  "ontents_int16\030\022 \003(\005\022\026\n\016contents_int32\030\023 "
  "\003(\005\022\026\n\016contents_int64\030\024 \003(\003\022\030\n\020contents_"
  "float16\030\025 \003(\002\022\030\n\020contents_float32\030\026 \003(\002\022"
  "\030\n\020contents_float64\030\027 \003(\001\022\025\n\rcontents_bo"
  "ol\030\030 \003(\010\022\026\n\016contents_qint8\030\031 \003(\021\022\027\n\017cont"
  "ents_quint8\030\032 \003(\r\022\027\n\017contents_qint32\030\033 \003"
  "(\021\022\031\n\021contents_bfloat16\030\034 \003(\002\"c\n\013TensorP"
  "roto\022*\n\006tensor\030\001 \001(\0132\032.syft.lib.torch.Te"
  "nsorData\022(\n\004grad\030\002 \001(\0132\032.syft.lib.torch."
  "TensorDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto_sccs[2] = {
  &scc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto.base,
  &scc_info_TensorProto_proto_2flib_2ftorch_2ftensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto = {
  false, false, descriptor_table_protodef_proto_2flib_2ftorch_2ftensor_2eproto, "proto/lib/torch/tensor.proto", 578,
  &descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto_once, descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto_sccs, descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_proto_2flib_2ftorch_2ftensor_2eproto::offsets,
  file_level_metadata_proto_2flib_2ftorch_2ftensor_2eproto, 2, file_level_enum_descriptors_proto_2flib_2ftorch_2ftensor_2eproto, file_level_service_descriptors_proto_2flib_2ftorch_2ftensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2flib_2ftorch_2ftensor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto)), true);
namespace syft {
namespace lib {
namespace torch {

// ===================================================================

class TensorData::_Internal {
 public:
};

TensorData::TensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena),
  contents_uint8_(arena),
  contents_int8_(arena),
  contents_int16_(arena),
  contents_int32_(arena),
  contents_int64_(arena),
  contents_float16_(arena),
  contents_float32_(arena),
  contents_float64_(arena),
  contents_bool_(arena),
  contents_qint8_(arena),
  contents_quint8_(arena),
  contents_qint32_(arena),
  contents_bfloat16_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syft.lib.torch.TensorData)
}
TensorData::TensorData(const TensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      contents_uint8_(from.contents_uint8_),
      contents_int8_(from.contents_int8_),
      contents_int16_(from.contents_int16_),
      contents_int32_(from.contents_int32_),
      contents_int64_(from.contents_int64_),
      contents_float16_(from.contents_float16_),
      contents_float32_(from.contents_float32_),
      contents_float64_(from.contents_float64_),
      contents_bool_(from.contents_bool_),
      contents_qint8_(from.contents_qint8_),
      contents_quint8_(from.contents_quint8_),
      contents_qint32_(from.contents_qint32_),
      contents_bfloat16_(from.contents_bfloat16_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dtype().empty()) {
    dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dtype(),
      GetArena());
  }
  ::memcpy(&is_quantized_, &from.is_quantized_,
    static_cast<size_t>(reinterpret_cast<char*>(&zero_point_) -
    reinterpret_cast<char*>(&is_quantized_)) + sizeof(zero_point_));
  // @@protoc_insertion_point(copy_constructor:syft.lib.torch.TensorData)
}

void TensorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto.base);
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_quantized_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zero_point_) -
      reinterpret_cast<char*>(&is_quantized_)) + sizeof(zero_point_));
}

TensorData::~TensorData() {
  // @@protoc_insertion_point(destructor:syft.lib.torch.TensorData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TensorData::ArenaDtor(void* object) {
  TensorData* _this = reinterpret_cast< TensorData* >(object);
  (void)_this;
}
void TensorData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorData& TensorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorData_proto_2flib_2ftorch_2ftensor_2eproto.base);
  return *internal_default_instance();
}


void TensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:syft.lib.torch.TensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  contents_uint8_.Clear();
  contents_int8_.Clear();
  contents_int16_.Clear();
  contents_int32_.Clear();
  contents_int64_.Clear();
  contents_float16_.Clear();
  contents_float32_.Clear();
  contents_float64_.Clear();
  contents_bool_.Clear();
  contents_qint8_.Clear();
  contents_quint8_.Clear();
  contents_qint32_.Clear();
  contents_bfloat16_.Clear();
  dtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&is_quantized_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zero_point_) -
      reinterpret_cast<char*>(&is_quantized_)) + sizeof(zero_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syft.lib.torch.TensorData.dtype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_quantized = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_quantized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 zero_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          zero_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 contents_uint8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_contents_uint8(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_contents_uint8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 contents_int8 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_contents_int8(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_contents_int8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 contents_int16 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_contents_int16(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_contents_int16(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 contents_int32 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_contents_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_contents_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 contents_int64 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_contents_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_contents_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float contents_float16 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_contents_float16(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173) {
          _internal_add_contents_float16(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float contents_float32 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_contents_float32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181) {
          _internal_add_contents_float32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double contents_float64 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_contents_float64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185) {
          _internal_add_contents_float64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool contents_bool = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_contents_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192) {
          _internal_add_contents_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 contents_qint8 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_contents_qint8(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200) {
          _internal_add_contents_qint8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 contents_quint8 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_contents_quint8(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208) {
          _internal_add_contents_quint8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 contents_qint32 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_contents_qint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_contents_qint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float contents_bfloat16 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_contents_bfloat16(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229) {
          _internal_add_contents_bfloat16(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syft.lib.torch.TensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 shape = 1;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_shape(), byte_size, target);
    }
  }

  // string dtype = 2;
  if (this->dtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syft.lib.torch.TensorData.dtype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dtype(), target);
  }

  // bool is_quantized = 3;
  if (this->is_quantized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_quantized(), target);
  }

  // float scale = 4;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_scale(), target);
  }

  // int32 zero_point = 5;
  if (this->zero_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_zero_point(), target);
  }

  // repeated uint32 contents_uint8 = 16;
  {
    int byte_size = _contents_uint8_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_contents_uint8(), byte_size, target);
    }
  }

  // repeated int32 contents_int8 = 17;
  {
    int byte_size = _contents_int8_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          17, _internal_contents_int8(), byte_size, target);
    }
  }

  // repeated int32 contents_int16 = 18;
  {
    int byte_size = _contents_int16_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_contents_int16(), byte_size, target);
    }
  }

  // repeated int32 contents_int32 = 19;
  {
    int byte_size = _contents_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          19, _internal_contents_int32(), byte_size, target);
    }
  }

  // repeated int64 contents_int64 = 20;
  {
    int byte_size = _contents_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          20, _internal_contents_int64(), byte_size, target);
    }
  }

  // repeated float contents_float16 = 21;
  if (this->_internal_contents_float16_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_contents_float16(), target);
  }

  // repeated float contents_float32 = 22;
  if (this->_internal_contents_float32_size() > 0) {
    target = stream->WriteFixedPacked(22, _internal_contents_float32(), target);
  }

  // repeated double contents_float64 = 23;
  if (this->_internal_contents_float64_size() > 0) {
    target = stream->WriteFixedPacked(23, _internal_contents_float64(), target);
  }

  // repeated bool contents_bool = 24;
  if (this->_internal_contents_bool_size() > 0) {
    target = stream->WriteFixedPacked(24, _internal_contents_bool(), target);
  }

  // repeated sint32 contents_qint8 = 25;
  {
    int byte_size = _contents_qint8_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          25, _internal_contents_qint8(), byte_size, target);
    }
  }

  // repeated uint32 contents_quint8 = 26;
  {
    int byte_size = _contents_quint8_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          26, _internal_contents_quint8(), byte_size, target);
    }
  }

  // repeated sint32 contents_qint32 = 27;
  {
    int byte_size = _contents_qint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          27, _internal_contents_qint32(), byte_size, target);
    }
  }

  // repeated float contents_bfloat16 = 28;
  if (this->_internal_contents_bfloat16_size() > 0) {
    target = stream->WriteFixedPacked(28, _internal_contents_bfloat16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syft.lib.torch.TensorData)
  return target;
}

size_t TensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syft.lib.torch.TensorData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 contents_uint8 = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->contents_uint8_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_uint8_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 contents_int8 = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->contents_int8_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_int8_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 contents_int16 = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->contents_int16_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_int16_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 contents_int32 = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->contents_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 contents_int64 = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->contents_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float contents_float16 = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contents_float16_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_float16_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float contents_float32 = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contents_float32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_float32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double contents_float64 = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contents_float64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_float64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool contents_bool = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contents_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 contents_qint8 = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->contents_qint8_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_qint8_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 contents_quint8 = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->contents_quint8_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_quint8_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 contents_qint32 = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->contents_qint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_qint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float contents_bfloat16 = 28;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contents_bfloat16_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _contents_bfloat16_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string dtype = 2;
  if (this->dtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  // bool is_quantized = 3;
  if (this->is_quantized() != 0) {
    total_size += 1 + 1;
  }

  // float scale = 4;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 zero_point = 5;
  if (this->zero_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zero_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syft.lib.torch.TensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syft.lib.torch.TensorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syft.lib.torch.TensorData)
    MergeFrom(*source);
  }
}

void TensorData::MergeFrom(const TensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syft.lib.torch.TensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  contents_uint8_.MergeFrom(from.contents_uint8_);
  contents_int8_.MergeFrom(from.contents_int8_);
  contents_int16_.MergeFrom(from.contents_int16_);
  contents_int32_.MergeFrom(from.contents_int32_);
  contents_int64_.MergeFrom(from.contents_int64_);
  contents_float16_.MergeFrom(from.contents_float16_);
  contents_float32_.MergeFrom(from.contents_float32_);
  contents_float64_.MergeFrom(from.contents_float64_);
  contents_bool_.MergeFrom(from.contents_bool_);
  contents_qint8_.MergeFrom(from.contents_qint8_);
  contents_quint8_.MergeFrom(from.contents_quint8_);
  contents_qint32_.MergeFrom(from.contents_qint32_);
  contents_bfloat16_.MergeFrom(from.contents_bfloat16_);
  if (from.dtype().size() > 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (from.is_quantized() != 0) {
    _internal_set_is_quantized(from._internal_is_quantized());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.zero_point() != 0) {
    _internal_set_zero_point(from._internal_zero_point());
  }
}

void TensorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syft.lib.torch.TensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorData::CopyFrom(const TensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syft.lib.torch.TensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorData::IsInitialized() const {
  return true;
}

void TensorData::InternalSwap(TensorData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  contents_uint8_.InternalSwap(&other->contents_uint8_);
  contents_int8_.InternalSwap(&other->contents_int8_);
  contents_int16_.InternalSwap(&other->contents_int16_);
  contents_int32_.InternalSwap(&other->contents_int32_);
  contents_int64_.InternalSwap(&other->contents_int64_);
  contents_float16_.InternalSwap(&other->contents_float16_);
  contents_float32_.InternalSwap(&other->contents_float32_);
  contents_float64_.InternalSwap(&other->contents_float64_);
  contents_bool_.InternalSwap(&other->contents_bool_);
  contents_qint8_.InternalSwap(&other->contents_qint8_);
  contents_quint8_.InternalSwap(&other->contents_quint8_);
  contents_qint32_.InternalSwap(&other->contents_qint32_);
  contents_bfloat16_.InternalSwap(&other->contents_bfloat16_);
  dtype_.Swap(&other->dtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorData, zero_point_)
      + sizeof(TensorData::zero_point_)
      - PROTOBUF_FIELD_OFFSET(TensorData, is_quantized_)>(
          reinterpret_cast<char*>(&is_quantized_),
          reinterpret_cast<char*>(&other->is_quantized_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TensorProto::_Internal {
 public:
  static const ::syft::lib::torch::TensorData& tensor(const TensorProto* msg);
  static const ::syft::lib::torch::TensorData& grad(const TensorProto* msg);
};

const ::syft::lib::torch::TensorData&
TensorProto::_Internal::tensor(const TensorProto* msg) {
  return *msg->tensor_;
}
const ::syft::lib::torch::TensorData&
TensorProto::_Internal::grad(const TensorProto* msg) {
  return *msg->grad_;
}
TensorProto::TensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syft.lib.torch.TensorProto)
}
TensorProto::TensorProto(const TensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tensor()) {
    tensor_ = new ::syft::lib::torch::TensorData(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  if (from._internal_has_grad()) {
    grad_ = new ::syft::lib::torch::TensorData(*from.grad_);
  } else {
    grad_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:syft.lib.torch.TensorProto)
}

void TensorProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorProto_proto_2flib_2ftorch_2ftensor_2eproto.base);
  ::memset(&tensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grad_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(grad_));
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:syft.lib.torch.TensorProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tensor_;
  if (this != internal_default_instance()) delete grad_;
}

void TensorProto::ArenaDtor(void* object) {
  TensorProto* _this = reinterpret_cast< TensorProto* >(object);
  (void)_this;
}
void TensorProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorProto& TensorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorProto_proto_2flib_2ftorch_2ftensor_2eproto.base);
  return *internal_default_instance();
}


void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:syft.lib.torch.TensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
  if (GetArena() == nullptr && grad_ != nullptr) {
    delete grad_;
  }
  grad_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .syft.lib.torch.TensorData tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syft.lib.torch.TensorData grad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_grad(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syft.lib.torch.TensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .syft.lib.torch.TensorData tensor = 1;
  if (this->has_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tensor(this), target, stream);
  }

  // .syft.lib.torch.TensorData grad = 2;
  if (this->has_grad()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::grad(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syft.lib.torch.TensorProto)
  return target;
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syft.lib.torch.TensorProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .syft.lib.torch.TensorData tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }

  // .syft.lib.torch.TensorData grad = 2;
  if (this->has_grad()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grad_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syft.lib.torch.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syft.lib.torch.TensorProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syft.lib.torch.TensorProto)
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syft.lib.torch.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor()) {
    _internal_mutable_tensor()->::syft::lib::torch::TensorData::MergeFrom(from._internal_tensor());
  }
  if (from.has_grad()) {
    _internal_mutable_grad()->::syft::lib::torch::TensorData::MergeFrom(from._internal_grad());
  }
}

void TensorProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syft.lib.torch.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syft.lib.torch.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {
  return true;
}

void TensorProto::InternalSwap(TensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto, grad_)
      + sizeof(TensorProto::grad_)
      - PROTOBUF_FIELD_OFFSET(TensorProto, tensor_)>(
          reinterpret_cast<char*>(&tensor_),
          reinterpret_cast<char*>(&other->tensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace torch
}  // namespace lib
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::syft::lib::torch::TensorData* Arena::CreateMaybeMessage< ::syft::lib::torch::TensorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syft::lib::torch::TensorData >(arena);
}
template<> PROTOBUF_NOINLINE ::syft::lib::torch::TensorProto* Arena::CreateMaybeMessage< ::syft::lib::torch::TensorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syft::lib::torch::TensorProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
