// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/lib/torch/parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2flib_2ftorch_2fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2flib_2ftorch_2fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/lib/torch/tensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2flib_2ftorch_2fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2flib_2ftorch_2fparameter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2flib_2ftorch_2fparameter_2eproto;
namespace syft {
namespace lib {
namespace torch {
class ParameterProto;
class ParameterProtoDefaultTypeInternal;
extern ParameterProtoDefaultTypeInternal _ParameterProto_default_instance_;
}  // namespace torch
}  // namespace lib
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> ::syft::lib::torch::ParameterProto* Arena::CreateMaybeMessage<::syft::lib::torch::ParameterProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syft {
namespace lib {
namespace torch {

// ===================================================================

class ParameterProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.lib.torch.ParameterProto) */ {
 public:
  inline ParameterProto() : ParameterProto(nullptr) {}
  virtual ~ParameterProto();

  ParameterProto(const ParameterProto& from);
  ParameterProto(ParameterProto&& from) noexcept
    : ParameterProto() {
    *this = ::std::move(from);
  }

  inline ParameterProto& operator=(const ParameterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterProto& operator=(ParameterProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParameterProto& default_instance();

  static inline const ParameterProto* internal_default_instance() {
    return reinterpret_cast<const ParameterProto*>(
               &_ParameterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParameterProto& a, ParameterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParameterProto* New() const final {
    return CreateMaybeMessage<ParameterProto>(nullptr);
  }

  ParameterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParameterProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParameterProto& from);
  void MergeFrom(const ParameterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.lib.torch.ParameterProto";
  }
  protected:
  explicit ParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flib_2ftorch_2fparameter_2eproto);
    return ::descriptor_table_proto_2flib_2ftorch_2fparameter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 1,
    kGradFieldNumber = 3,
    kRequiresGradFieldNumber = 2,
  };
  // .syft.lib.torch.TensorData tensor = 1;
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;
  public:
  void clear_tensor();
  const ::syft::lib::torch::TensorData& tensor() const;
  ::syft::lib::torch::TensorData* release_tensor();
  ::syft::lib::torch::TensorData* mutable_tensor();
  void set_allocated_tensor(::syft::lib::torch::TensorData* tensor);
  private:
  const ::syft::lib::torch::TensorData& _internal_tensor() const;
  ::syft::lib::torch::TensorData* _internal_mutable_tensor();
  public:
  void unsafe_arena_set_allocated_tensor(
      ::syft::lib::torch::TensorData* tensor);
  ::syft::lib::torch::TensorData* unsafe_arena_release_tensor();

  // .syft.lib.torch.TensorData grad = 3;
  bool has_grad() const;
  private:
  bool _internal_has_grad() const;
  public:
  void clear_grad();
  const ::syft::lib::torch::TensorData& grad() const;
  ::syft::lib::torch::TensorData* release_grad();
  ::syft::lib::torch::TensorData* mutable_grad();
  void set_allocated_grad(::syft::lib::torch::TensorData* grad);
  private:
  const ::syft::lib::torch::TensorData& _internal_grad() const;
  ::syft::lib::torch::TensorData* _internal_mutable_grad();
  public:
  void unsafe_arena_set_allocated_grad(
      ::syft::lib::torch::TensorData* grad);
  ::syft::lib::torch::TensorData* unsafe_arena_release_grad();

  // bool requires_grad = 2;
  void clear_requires_grad();
  bool requires_grad() const;
  void set_requires_grad(bool value);
  private:
  bool _internal_requires_grad() const;
  void _internal_set_requires_grad(bool value);
  public:

  // @@protoc_insertion_point(class_scope:syft.lib.torch.ParameterProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::syft::lib::torch::TensorData* tensor_;
  ::syft::lib::torch::TensorData* grad_;
  bool requires_grad_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flib_2ftorch_2fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParameterProto

// .syft.lib.torch.TensorData tensor = 1;
inline bool ParameterProto::_internal_has_tensor() const {
  return this != internal_default_instance() && tensor_ != nullptr;
}
inline bool ParameterProto::has_tensor() const {
  return _internal_has_tensor();
}
inline const ::syft::lib::torch::TensorData& ParameterProto::_internal_tensor() const {
  const ::syft::lib::torch::TensorData* p = tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::lib::torch::TensorData&>(
      ::syft::lib::torch::_TensorData_default_instance_);
}
inline const ::syft::lib::torch::TensorData& ParameterProto::tensor() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.ParameterProto.tensor)
  return _internal_tensor();
}
inline void ParameterProto::unsafe_arena_set_allocated_tensor(
    ::syft::lib::torch::TensorData* tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_);
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.lib.torch.ParameterProto.tensor)
}
inline ::syft::lib::torch::TensorData* ParameterProto::release_tensor() {
  
  ::syft::lib::torch::TensorData* temp = tensor_;
  tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::lib::torch::TensorData* ParameterProto::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_release:syft.lib.torch.ParameterProto.tensor)
  
  ::syft::lib::torch::TensorData* temp = tensor_;
  tensor_ = nullptr;
  return temp;
}
inline ::syft::lib::torch::TensorData* ParameterProto::_internal_mutable_tensor() {
  
  if (tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::lib::torch::TensorData>(GetArena());
    tensor_ = p;
  }
  return tensor_;
}
inline ::syft::lib::torch::TensorData* ParameterProto::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable:syft.lib.torch.ParameterProto.tensor)
  return _internal_mutable_tensor();
}
inline void ParameterProto::set_allocated_tensor(::syft::lib::torch::TensorData* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_);
  }
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor)->GetArena();
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    
  } else {
    
  }
  tensor_ = tensor;
  // @@protoc_insertion_point(field_set_allocated:syft.lib.torch.ParameterProto.tensor)
}

// bool requires_grad = 2;
inline void ParameterProto::clear_requires_grad() {
  requires_grad_ = false;
}
inline bool ParameterProto::_internal_requires_grad() const {
  return requires_grad_;
}
inline bool ParameterProto::requires_grad() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.ParameterProto.requires_grad)
  return _internal_requires_grad();
}
inline void ParameterProto::_internal_set_requires_grad(bool value) {
  
  requires_grad_ = value;
}
inline void ParameterProto::set_requires_grad(bool value) {
  _internal_set_requires_grad(value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.ParameterProto.requires_grad)
}

// .syft.lib.torch.TensorData grad = 3;
inline bool ParameterProto::_internal_has_grad() const {
  return this != internal_default_instance() && grad_ != nullptr;
}
inline bool ParameterProto::has_grad() const {
  return _internal_has_grad();
}
inline const ::syft::lib::torch::TensorData& ParameterProto::_internal_grad() const {
  const ::syft::lib::torch::TensorData* p = grad_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::lib::torch::TensorData&>(
      ::syft::lib::torch::_TensorData_default_instance_);
}
inline const ::syft::lib::torch::TensorData& ParameterProto::grad() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.ParameterProto.grad)
  return _internal_grad();
}
inline void ParameterProto::unsafe_arena_set_allocated_grad(
    ::syft::lib::torch::TensorData* grad) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grad_);
  }
  grad_ = grad;
  if (grad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.lib.torch.ParameterProto.grad)
}
inline ::syft::lib::torch::TensorData* ParameterProto::release_grad() {
  
  ::syft::lib::torch::TensorData* temp = grad_;
  grad_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::lib::torch::TensorData* ParameterProto::unsafe_arena_release_grad() {
  // @@protoc_insertion_point(field_release:syft.lib.torch.ParameterProto.grad)
  
  ::syft::lib::torch::TensorData* temp = grad_;
  grad_ = nullptr;
  return temp;
}
inline ::syft::lib::torch::TensorData* ParameterProto::_internal_mutable_grad() {
  
  if (grad_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::lib::torch::TensorData>(GetArena());
    grad_ = p;
  }
  return grad_;
}
inline ::syft::lib::torch::TensorData* ParameterProto::mutable_grad() {
  // @@protoc_insertion_point(field_mutable:syft.lib.torch.ParameterProto.grad)
  return _internal_mutable_grad();
}
inline void ParameterProto::set_allocated_grad(::syft::lib::torch::TensorData* grad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grad_);
  }
  if (grad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grad)->GetArena();
    if (message_arena != submessage_arena) {
      grad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grad, submessage_arena);
    }
    
  } else {
    
  }
  grad_ = grad;
  // @@protoc_insertion_point(field_set_allocated:syft.lib.torch.ParameterProto.grad)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace torch
}  // namespace lib
}  // namespace syft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2flib_2ftorch_2fparameter_2eproto
