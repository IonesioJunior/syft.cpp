// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/lib/torch/tensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2flib_2ftorch_2ftensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2flib_2ftorch_2ftensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2flib_2ftorch_2ftensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2flib_2ftorch_2ftensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto;
namespace syft {
namespace lib {
namespace torch {
class TensorData;
class TensorDataDefaultTypeInternal;
extern TensorDataDefaultTypeInternal _TensorData_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
}  // namespace torch
}  // namespace lib
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> ::syft::lib::torch::TensorData* Arena::CreateMaybeMessage<::syft::lib::torch::TensorData>(Arena*);
template<> ::syft::lib::torch::TensorProto* Arena::CreateMaybeMessage<::syft::lib::torch::TensorProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syft {
namespace lib {
namespace torch {

// ===================================================================

class TensorData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.lib.torch.TensorData) */ {
 public:
  inline TensorData() : TensorData(nullptr) {}
  virtual ~TensorData();

  TensorData(const TensorData& from);
  TensorData(TensorData&& from) noexcept
    : TensorData() {
    *this = ::std::move(from);
  }

  inline TensorData& operator=(const TensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorData& operator=(TensorData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorData& default_instance();

  static inline const TensorData* internal_default_instance() {
    return reinterpret_cast<const TensorData*>(
               &_TensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorData& a, TensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorData* New() const final {
    return CreateMaybeMessage<TensorData>(nullptr);
  }

  TensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorData& from);
  void MergeFrom(const TensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.lib.torch.TensorData";
  }
  protected:
  explicit TensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto);
    return ::descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kContentsUint8FieldNumber = 16,
    kContentsInt8FieldNumber = 17,
    kContentsInt16FieldNumber = 18,
    kContentsInt32FieldNumber = 19,
    kContentsInt64FieldNumber = 20,
    kContentsFloat16FieldNumber = 21,
    kContentsFloat32FieldNumber = 22,
    kContentsFloat64FieldNumber = 23,
    kContentsBoolFieldNumber = 24,
    kContentsQint8FieldNumber = 25,
    kContentsQuint8FieldNumber = 26,
    kContentsQint32FieldNumber = 27,
    kContentsBfloat16FieldNumber = 28,
    kDtypeFieldNumber = 2,
    kIsQuantizedFieldNumber = 3,
    kScaleFieldNumber = 4,
    kZeroPointFieldNumber = 5,
  };
  // repeated int64 shape = 1;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_shape();

  // repeated uint32 contents_uint8 = 16;
  int contents_uint8_size() const;
  private:
  int _internal_contents_uint8_size() const;
  public:
  void clear_contents_uint8();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contents_uint8(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_contents_uint8() const;
  void _internal_add_contents_uint8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_contents_uint8();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 contents_uint8(int index) const;
  void set_contents_uint8(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_contents_uint8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      contents_uint8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_contents_uint8();

  // repeated int32 contents_int8 = 17;
  int contents_int8_size() const;
  private:
  int _internal_contents_int8_size() const;
  public:
  void clear_contents_int8();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contents_int8(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_contents_int8() const;
  void _internal_add_contents_int8(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_contents_int8();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 contents_int8(int index) const;
  void set_contents_int8(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_contents_int8(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      contents_int8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_contents_int8();

  // repeated int32 contents_int16 = 18;
  int contents_int16_size() const;
  private:
  int _internal_contents_int16_size() const;
  public:
  void clear_contents_int16();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contents_int16(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_contents_int16() const;
  void _internal_add_contents_int16(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_contents_int16();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 contents_int16(int index) const;
  void set_contents_int16(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_contents_int16(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      contents_int16() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_contents_int16();

  // repeated int32 contents_int32 = 19;
  int contents_int32_size() const;
  private:
  int _internal_contents_int32_size() const;
  public:
  void clear_contents_int32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contents_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_contents_int32() const;
  void _internal_add_contents_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_contents_int32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 contents_int32(int index) const;
  void set_contents_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_contents_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      contents_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_contents_int32();

  // repeated int64 contents_int64 = 20;
  int contents_int64_size() const;
  private:
  int _internal_contents_int64_size() const;
  public:
  void clear_contents_int64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_contents_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_contents_int64() const;
  void _internal_add_contents_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_contents_int64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 contents_int64(int index) const;
  void set_contents_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_contents_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      contents_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_contents_int64();

  // repeated float contents_float16 = 21;
  int contents_float16_size() const;
  private:
  int _internal_contents_float16_size() const;
  public:
  void clear_contents_float16();
  private:
  float _internal_contents_float16(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_contents_float16() const;
  void _internal_add_contents_float16(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_contents_float16();
  public:
  float contents_float16(int index) const;
  void set_contents_float16(int index, float value);
  void add_contents_float16(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      contents_float16() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_contents_float16();

  // repeated float contents_float32 = 22;
  int contents_float32_size() const;
  private:
  int _internal_contents_float32_size() const;
  public:
  void clear_contents_float32();
  private:
  float _internal_contents_float32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_contents_float32() const;
  void _internal_add_contents_float32(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_contents_float32();
  public:
  float contents_float32(int index) const;
  void set_contents_float32(int index, float value);
  void add_contents_float32(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      contents_float32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_contents_float32();

  // repeated double contents_float64 = 23;
  int contents_float64_size() const;
  private:
  int _internal_contents_float64_size() const;
  public:
  void clear_contents_float64();
  private:
  double _internal_contents_float64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_contents_float64() const;
  void _internal_add_contents_float64(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_contents_float64();
  public:
  double contents_float64(int index) const;
  void set_contents_float64(int index, double value);
  void add_contents_float64(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      contents_float64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_contents_float64();

  // repeated bool contents_bool = 24;
  int contents_bool_size() const;
  private:
  int _internal_contents_bool_size() const;
  public:
  void clear_contents_bool();
  private:
  bool _internal_contents_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_contents_bool() const;
  void _internal_add_contents_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_contents_bool();
  public:
  bool contents_bool(int index) const;
  void set_contents_bool(int index, bool value);
  void add_contents_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      contents_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_contents_bool();

  // repeated sint32 contents_qint8 = 25;
  int contents_qint8_size() const;
  private:
  int _internal_contents_qint8_size() const;
  public:
  void clear_contents_qint8();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contents_qint8(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_contents_qint8() const;
  void _internal_add_contents_qint8(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_contents_qint8();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 contents_qint8(int index) const;
  void set_contents_qint8(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_contents_qint8(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      contents_qint8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_contents_qint8();

  // repeated uint32 contents_quint8 = 26;
  int contents_quint8_size() const;
  private:
  int _internal_contents_quint8_size() const;
  public:
  void clear_contents_quint8();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contents_quint8(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_contents_quint8() const;
  void _internal_add_contents_quint8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_contents_quint8();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 contents_quint8(int index) const;
  void set_contents_quint8(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_contents_quint8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      contents_quint8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_contents_quint8();

  // repeated sint32 contents_qint32 = 27;
  int contents_qint32_size() const;
  private:
  int _internal_contents_qint32_size() const;
  public:
  void clear_contents_qint32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contents_qint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_contents_qint32() const;
  void _internal_add_contents_qint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_contents_qint32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 contents_qint32(int index) const;
  void set_contents_qint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_contents_qint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      contents_qint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_contents_qint32();

  // repeated float contents_bfloat16 = 28;
  int contents_bfloat16_size() const;
  private:
  int _internal_contents_bfloat16_size() const;
  public:
  void clear_contents_bfloat16();
  private:
  float _internal_contents_bfloat16(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_contents_bfloat16() const;
  void _internal_add_contents_bfloat16(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_contents_bfloat16();
  public:
  float contents_bfloat16(int index) const;
  void set_contents_bfloat16(int index, float value);
  void add_contents_bfloat16(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      contents_bfloat16() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_contents_bfloat16();

  // string dtype = 2;
  void clear_dtype();
  const std::string& dtype() const;
  void set_dtype(const std::string& value);
  void set_dtype(std::string&& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  std::string* mutable_dtype();
  std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // bool is_quantized = 3;
  void clear_is_quantized();
  bool is_quantized() const;
  void set_is_quantized(bool value);
  private:
  bool _internal_is_quantized() const;
  void _internal_set_is_quantized(bool value);
  public:

  // float scale = 4;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // int32 zero_point = 5;
  void clear_zero_point();
  ::PROTOBUF_NAMESPACE_ID::int32 zero_point() const;
  void set_zero_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zero_point() const;
  void _internal_set_zero_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syft.lib.torch.TensorData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > contents_uint8_;
  mutable std::atomic<int> _contents_uint8_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > contents_int8_;
  mutable std::atomic<int> _contents_int8_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > contents_int16_;
  mutable std::atomic<int> _contents_int16_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > contents_int32_;
  mutable std::atomic<int> _contents_int32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > contents_int64_;
  mutable std::atomic<int> _contents_int64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > contents_float16_;
  mutable std::atomic<int> _contents_float16_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > contents_float32_;
  mutable std::atomic<int> _contents_float32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > contents_float64_;
  mutable std::atomic<int> _contents_float64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > contents_bool_;
  mutable std::atomic<int> _contents_bool_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > contents_qint8_;
  mutable std::atomic<int> _contents_qint8_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > contents_quint8_;
  mutable std::atomic<int> _contents_quint8_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > contents_qint32_;
  mutable std::atomic<int> _contents_qint32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > contents_bfloat16_;
  mutable std::atomic<int> _contents_bfloat16_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  bool is_quantized_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 zero_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flib_2ftorch_2ftensor_2eproto;
};
// -------------------------------------------------------------------

class TensorProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.lib.torch.TensorProto) */ {
 public:
  inline TensorProto() : TensorProto(nullptr) {}
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorProto& default_instance();

  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const final {
    return CreateMaybeMessage<TensorProto>(nullptr);
  }

  TensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.lib.torch.TensorProto";
  }
  protected:
  explicit TensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto);
    return ::descriptor_table_proto_2flib_2ftorch_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 1,
    kGradFieldNumber = 2,
  };
  // .syft.lib.torch.TensorData tensor = 1;
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;
  public:
  void clear_tensor();
  const ::syft::lib::torch::TensorData& tensor() const;
  ::syft::lib::torch::TensorData* release_tensor();
  ::syft::lib::torch::TensorData* mutable_tensor();
  void set_allocated_tensor(::syft::lib::torch::TensorData* tensor);
  private:
  const ::syft::lib::torch::TensorData& _internal_tensor() const;
  ::syft::lib::torch::TensorData* _internal_mutable_tensor();
  public:
  void unsafe_arena_set_allocated_tensor(
      ::syft::lib::torch::TensorData* tensor);
  ::syft::lib::torch::TensorData* unsafe_arena_release_tensor();

  // .syft.lib.torch.TensorData grad = 2;
  bool has_grad() const;
  private:
  bool _internal_has_grad() const;
  public:
  void clear_grad();
  const ::syft::lib::torch::TensorData& grad() const;
  ::syft::lib::torch::TensorData* release_grad();
  ::syft::lib::torch::TensorData* mutable_grad();
  void set_allocated_grad(::syft::lib::torch::TensorData* grad);
  private:
  const ::syft::lib::torch::TensorData& _internal_grad() const;
  ::syft::lib::torch::TensorData* _internal_mutable_grad();
  public:
  void unsafe_arena_set_allocated_grad(
      ::syft::lib::torch::TensorData* grad);
  ::syft::lib::torch::TensorData* unsafe_arena_release_grad();

  // @@protoc_insertion_point(class_scope:syft.lib.torch.TensorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::syft::lib::torch::TensorData* tensor_;
  ::syft::lib::torch::TensorData* grad_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flib_2ftorch_2ftensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorData

// repeated int64 shape = 1;
inline int TensorData::_internal_shape_size() const {
  return shape_.size();
}
inline int TensorData::shape_size() const {
  return _internal_shape_size();
}
inline void TensorData::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorData::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorData::shape(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.shape)
  return _internal_shape(index);
}
inline void TensorData::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.shape)
}
inline void TensorData::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  shape_.Add(value);
}
inline void TensorData::add_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorData::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorData::shape() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorData::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorData::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.shape)
  return _internal_mutable_shape();
}

// string dtype = 2;
inline void TensorData::clear_dtype() {
  dtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorData::dtype() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.dtype)
  return _internal_dtype();
}
inline void TensorData::set_dtype(const std::string& value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.dtype)
}
inline std::string* TensorData::mutable_dtype() {
  // @@protoc_insertion_point(field_mutable:syft.lib.torch.TensorData.dtype)
  return _internal_mutable_dtype();
}
inline const std::string& TensorData::_internal_dtype() const {
  return dtype_.Get();
}
inline void TensorData::_internal_set_dtype(const std::string& value) {
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorData::set_dtype(std::string&& value) {
  
  dtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:syft.lib.torch.TensorData.dtype)
}
inline void TensorData::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:syft.lib.torch.TensorData.dtype)
}
inline void TensorData::set_dtype(const char* value,
    size_t size) {
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:syft.lib.torch.TensorData.dtype)
}
inline std::string* TensorData::_internal_mutable_dtype() {
  
  return dtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorData::release_dtype() {
  // @@protoc_insertion_point(field_release:syft.lib.torch.TensorData.dtype)
  return dtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorData::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    
  } else {
    
  }
  dtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:syft.lib.torch.TensorData.dtype)
}

// bool is_quantized = 3;
inline void TensorData::clear_is_quantized() {
  is_quantized_ = false;
}
inline bool TensorData::_internal_is_quantized() const {
  return is_quantized_;
}
inline bool TensorData::is_quantized() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.is_quantized)
  return _internal_is_quantized();
}
inline void TensorData::_internal_set_is_quantized(bool value) {
  
  is_quantized_ = value;
}
inline void TensorData::set_is_quantized(bool value) {
  _internal_set_is_quantized(value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.is_quantized)
}

// float scale = 4;
inline void TensorData::clear_scale() {
  scale_ = 0;
}
inline float TensorData::_internal_scale() const {
  return scale_;
}
inline float TensorData::scale() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.scale)
  return _internal_scale();
}
inline void TensorData::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void TensorData::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.scale)
}

// int32 zero_point = 5;
inline void TensorData::clear_zero_point() {
  zero_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::_internal_zero_point() const {
  return zero_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::zero_point() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.zero_point)
  return _internal_zero_point();
}
inline void TensorData::_internal_set_zero_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zero_point_ = value;
}
inline void TensorData::set_zero_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zero_point(value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.zero_point)
}

// repeated uint32 contents_uint8 = 16;
inline int TensorData::_internal_contents_uint8_size() const {
  return contents_uint8_.size();
}
inline int TensorData::contents_uint8_size() const {
  return _internal_contents_uint8_size();
}
inline void TensorData::clear_contents_uint8() {
  contents_uint8_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorData::_internal_contents_uint8(int index) const {
  return contents_uint8_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorData::contents_uint8(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_uint8)
  return _internal_contents_uint8(index);
}
inline void TensorData::set_contents_uint8(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  contents_uint8_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_uint8)
}
inline void TensorData::_internal_add_contents_uint8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  contents_uint8_.Add(value);
}
inline void TensorData::add_contents_uint8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_contents_uint8(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_uint8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TensorData::_internal_contents_uint8() const {
  return contents_uint8_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TensorData::contents_uint8() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_uint8)
  return _internal_contents_uint8();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TensorData::_internal_mutable_contents_uint8() {
  return &contents_uint8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TensorData::mutable_contents_uint8() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_uint8)
  return _internal_mutable_contents_uint8();
}

// repeated int32 contents_int8 = 17;
inline int TensorData::_internal_contents_int8_size() const {
  return contents_int8_.size();
}
inline int TensorData::contents_int8_size() const {
  return _internal_contents_int8_size();
}
inline void TensorData::clear_contents_int8() {
  contents_int8_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::_internal_contents_int8(int index) const {
  return contents_int8_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::contents_int8(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_int8)
  return _internal_contents_int8(index);
}
inline void TensorData::set_contents_int8(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_int8_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_int8)
}
inline void TensorData::_internal_add_contents_int8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_int8_.Add(value);
}
inline void TensorData::add_contents_int8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_contents_int8(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_int8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::_internal_contents_int8() const {
  return contents_int8_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::contents_int8() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_int8)
  return _internal_contents_int8();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::_internal_mutable_contents_int8() {
  return &contents_int8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::mutable_contents_int8() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_int8)
  return _internal_mutable_contents_int8();
}

// repeated int32 contents_int16 = 18;
inline int TensorData::_internal_contents_int16_size() const {
  return contents_int16_.size();
}
inline int TensorData::contents_int16_size() const {
  return _internal_contents_int16_size();
}
inline void TensorData::clear_contents_int16() {
  contents_int16_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::_internal_contents_int16(int index) const {
  return contents_int16_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::contents_int16(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_int16)
  return _internal_contents_int16(index);
}
inline void TensorData::set_contents_int16(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_int16_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_int16)
}
inline void TensorData::_internal_add_contents_int16(::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_int16_.Add(value);
}
inline void TensorData::add_contents_int16(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_contents_int16(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_int16)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::_internal_contents_int16() const {
  return contents_int16_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::contents_int16() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_int16)
  return _internal_contents_int16();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::_internal_mutable_contents_int16() {
  return &contents_int16_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::mutable_contents_int16() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_int16)
  return _internal_mutable_contents_int16();
}

// repeated int32 contents_int32 = 19;
inline int TensorData::_internal_contents_int32_size() const {
  return contents_int32_.size();
}
inline int TensorData::contents_int32_size() const {
  return _internal_contents_int32_size();
}
inline void TensorData::clear_contents_int32() {
  contents_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::_internal_contents_int32(int index) const {
  return contents_int32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::contents_int32(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_int32)
  return _internal_contents_int32(index);
}
inline void TensorData::set_contents_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_int32)
}
inline void TensorData::_internal_add_contents_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_int32_.Add(value);
}
inline void TensorData::add_contents_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_contents_int32(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::_internal_contents_int32() const {
  return contents_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::contents_int32() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_int32)
  return _internal_contents_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::_internal_mutable_contents_int32() {
  return &contents_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::mutable_contents_int32() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_int32)
  return _internal_mutable_contents_int32();
}

// repeated int64 contents_int64 = 20;
inline int TensorData::_internal_contents_int64_size() const {
  return contents_int64_.size();
}
inline int TensorData::contents_int64_size() const {
  return _internal_contents_int64_size();
}
inline void TensorData::clear_contents_int64() {
  contents_int64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorData::_internal_contents_int64(int index) const {
  return contents_int64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorData::contents_int64(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_int64)
  return _internal_contents_int64(index);
}
inline void TensorData::set_contents_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  contents_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_int64)
}
inline void TensorData::_internal_add_contents_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  contents_int64_.Add(value);
}
inline void TensorData::add_contents_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_contents_int64(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorData::_internal_contents_int64() const {
  return contents_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorData::contents_int64() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_int64)
  return _internal_contents_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorData::_internal_mutable_contents_int64() {
  return &contents_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorData::mutable_contents_int64() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_int64)
  return _internal_mutable_contents_int64();
}

// repeated float contents_float16 = 21;
inline int TensorData::_internal_contents_float16_size() const {
  return contents_float16_.size();
}
inline int TensorData::contents_float16_size() const {
  return _internal_contents_float16_size();
}
inline void TensorData::clear_contents_float16() {
  contents_float16_.Clear();
}
inline float TensorData::_internal_contents_float16(int index) const {
  return contents_float16_.Get(index);
}
inline float TensorData::contents_float16(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_float16)
  return _internal_contents_float16(index);
}
inline void TensorData::set_contents_float16(int index, float value) {
  contents_float16_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_float16)
}
inline void TensorData::_internal_add_contents_float16(float value) {
  contents_float16_.Add(value);
}
inline void TensorData::add_contents_float16(float value) {
  _internal_add_contents_float16(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_float16)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorData::_internal_contents_float16() const {
  return contents_float16_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorData::contents_float16() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_float16)
  return _internal_contents_float16();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorData::_internal_mutable_contents_float16() {
  return &contents_float16_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorData::mutable_contents_float16() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_float16)
  return _internal_mutable_contents_float16();
}

// repeated float contents_float32 = 22;
inline int TensorData::_internal_contents_float32_size() const {
  return contents_float32_.size();
}
inline int TensorData::contents_float32_size() const {
  return _internal_contents_float32_size();
}
inline void TensorData::clear_contents_float32() {
  contents_float32_.Clear();
}
inline float TensorData::_internal_contents_float32(int index) const {
  return contents_float32_.Get(index);
}
inline float TensorData::contents_float32(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_float32)
  return _internal_contents_float32(index);
}
inline void TensorData::set_contents_float32(int index, float value) {
  contents_float32_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_float32)
}
inline void TensorData::_internal_add_contents_float32(float value) {
  contents_float32_.Add(value);
}
inline void TensorData::add_contents_float32(float value) {
  _internal_add_contents_float32(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_float32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorData::_internal_contents_float32() const {
  return contents_float32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorData::contents_float32() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_float32)
  return _internal_contents_float32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorData::_internal_mutable_contents_float32() {
  return &contents_float32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorData::mutable_contents_float32() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_float32)
  return _internal_mutable_contents_float32();
}

// repeated double contents_float64 = 23;
inline int TensorData::_internal_contents_float64_size() const {
  return contents_float64_.size();
}
inline int TensorData::contents_float64_size() const {
  return _internal_contents_float64_size();
}
inline void TensorData::clear_contents_float64() {
  contents_float64_.Clear();
}
inline double TensorData::_internal_contents_float64(int index) const {
  return contents_float64_.Get(index);
}
inline double TensorData::contents_float64(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_float64)
  return _internal_contents_float64(index);
}
inline void TensorData::set_contents_float64(int index, double value) {
  contents_float64_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_float64)
}
inline void TensorData::_internal_add_contents_float64(double value) {
  contents_float64_.Add(value);
}
inline void TensorData::add_contents_float64(double value) {
  _internal_add_contents_float64(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_float64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorData::_internal_contents_float64() const {
  return contents_float64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorData::contents_float64() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_float64)
  return _internal_contents_float64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorData::_internal_mutable_contents_float64() {
  return &contents_float64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorData::mutable_contents_float64() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_float64)
  return _internal_mutable_contents_float64();
}

// repeated bool contents_bool = 24;
inline int TensorData::_internal_contents_bool_size() const {
  return contents_bool_.size();
}
inline int TensorData::contents_bool_size() const {
  return _internal_contents_bool_size();
}
inline void TensorData::clear_contents_bool() {
  contents_bool_.Clear();
}
inline bool TensorData::_internal_contents_bool(int index) const {
  return contents_bool_.Get(index);
}
inline bool TensorData::contents_bool(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_bool)
  return _internal_contents_bool(index);
}
inline void TensorData::set_contents_bool(int index, bool value) {
  contents_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_bool)
}
inline void TensorData::_internal_add_contents_bool(bool value) {
  contents_bool_.Add(value);
}
inline void TensorData::add_contents_bool(bool value) {
  _internal_add_contents_bool(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TensorData::_internal_contents_bool() const {
  return contents_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TensorData::contents_bool() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_bool)
  return _internal_contents_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TensorData::_internal_mutable_contents_bool() {
  return &contents_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TensorData::mutable_contents_bool() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_bool)
  return _internal_mutable_contents_bool();
}

// repeated sint32 contents_qint8 = 25;
inline int TensorData::_internal_contents_qint8_size() const {
  return contents_qint8_.size();
}
inline int TensorData::contents_qint8_size() const {
  return _internal_contents_qint8_size();
}
inline void TensorData::clear_contents_qint8() {
  contents_qint8_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::_internal_contents_qint8(int index) const {
  return contents_qint8_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::contents_qint8(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_qint8)
  return _internal_contents_qint8(index);
}
inline void TensorData::set_contents_qint8(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_qint8_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_qint8)
}
inline void TensorData::_internal_add_contents_qint8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_qint8_.Add(value);
}
inline void TensorData::add_contents_qint8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_contents_qint8(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_qint8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::_internal_contents_qint8() const {
  return contents_qint8_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::contents_qint8() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_qint8)
  return _internal_contents_qint8();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::_internal_mutable_contents_qint8() {
  return &contents_qint8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::mutable_contents_qint8() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_qint8)
  return _internal_mutable_contents_qint8();
}

// repeated uint32 contents_quint8 = 26;
inline int TensorData::_internal_contents_quint8_size() const {
  return contents_quint8_.size();
}
inline int TensorData::contents_quint8_size() const {
  return _internal_contents_quint8_size();
}
inline void TensorData::clear_contents_quint8() {
  contents_quint8_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorData::_internal_contents_quint8(int index) const {
  return contents_quint8_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorData::contents_quint8(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_quint8)
  return _internal_contents_quint8(index);
}
inline void TensorData::set_contents_quint8(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  contents_quint8_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_quint8)
}
inline void TensorData::_internal_add_contents_quint8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  contents_quint8_.Add(value);
}
inline void TensorData::add_contents_quint8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_contents_quint8(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_quint8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TensorData::_internal_contents_quint8() const {
  return contents_quint8_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TensorData::contents_quint8() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_quint8)
  return _internal_contents_quint8();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TensorData::_internal_mutable_contents_quint8() {
  return &contents_quint8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TensorData::mutable_contents_quint8() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_quint8)
  return _internal_mutable_contents_quint8();
}

// repeated sint32 contents_qint32 = 27;
inline int TensorData::_internal_contents_qint32_size() const {
  return contents_qint32_.size();
}
inline int TensorData::contents_qint32_size() const {
  return _internal_contents_qint32_size();
}
inline void TensorData::clear_contents_qint32() {
  contents_qint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::_internal_contents_qint32(int index) const {
  return contents_qint32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorData::contents_qint32(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_qint32)
  return _internal_contents_qint32(index);
}
inline void TensorData::set_contents_qint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_qint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_qint32)
}
inline void TensorData::_internal_add_contents_qint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  contents_qint32_.Add(value);
}
inline void TensorData::add_contents_qint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_contents_qint32(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_qint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::_internal_contents_qint32() const {
  return contents_qint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorData::contents_qint32() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_qint32)
  return _internal_contents_qint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::_internal_mutable_contents_qint32() {
  return &contents_qint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorData::mutable_contents_qint32() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_qint32)
  return _internal_mutable_contents_qint32();
}

// repeated float contents_bfloat16 = 28;
inline int TensorData::_internal_contents_bfloat16_size() const {
  return contents_bfloat16_.size();
}
inline int TensorData::contents_bfloat16_size() const {
  return _internal_contents_bfloat16_size();
}
inline void TensorData::clear_contents_bfloat16() {
  contents_bfloat16_.Clear();
}
inline float TensorData::_internal_contents_bfloat16(int index) const {
  return contents_bfloat16_.Get(index);
}
inline float TensorData::contents_bfloat16(int index) const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorData.contents_bfloat16)
  return _internal_contents_bfloat16(index);
}
inline void TensorData::set_contents_bfloat16(int index, float value) {
  contents_bfloat16_.Set(index, value);
  // @@protoc_insertion_point(field_set:syft.lib.torch.TensorData.contents_bfloat16)
}
inline void TensorData::_internal_add_contents_bfloat16(float value) {
  contents_bfloat16_.Add(value);
}
inline void TensorData::add_contents_bfloat16(float value) {
  _internal_add_contents_bfloat16(value);
  // @@protoc_insertion_point(field_add:syft.lib.torch.TensorData.contents_bfloat16)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorData::_internal_contents_bfloat16() const {
  return contents_bfloat16_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorData::contents_bfloat16() const {
  // @@protoc_insertion_point(field_list:syft.lib.torch.TensorData.contents_bfloat16)
  return _internal_contents_bfloat16();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorData::_internal_mutable_contents_bfloat16() {
  return &contents_bfloat16_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorData::mutable_contents_bfloat16() {
  // @@protoc_insertion_point(field_mutable_list:syft.lib.torch.TensorData.contents_bfloat16)
  return _internal_mutable_contents_bfloat16();
}

// -------------------------------------------------------------------

// TensorProto

// .syft.lib.torch.TensorData tensor = 1;
inline bool TensorProto::_internal_has_tensor() const {
  return this != internal_default_instance() && tensor_ != nullptr;
}
inline bool TensorProto::has_tensor() const {
  return _internal_has_tensor();
}
inline void TensorProto::clear_tensor() {
  if (GetArena() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
}
inline const ::syft::lib::torch::TensorData& TensorProto::_internal_tensor() const {
  const ::syft::lib::torch::TensorData* p = tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::lib::torch::TensorData&>(
      ::syft::lib::torch::_TensorData_default_instance_);
}
inline const ::syft::lib::torch::TensorData& TensorProto::tensor() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorProto.tensor)
  return _internal_tensor();
}
inline void TensorProto::unsafe_arena_set_allocated_tensor(
    ::syft::lib::torch::TensorData* tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_);
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.lib.torch.TensorProto.tensor)
}
inline ::syft::lib::torch::TensorData* TensorProto::release_tensor() {
  
  ::syft::lib::torch::TensorData* temp = tensor_;
  tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::lib::torch::TensorData* TensorProto::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_release:syft.lib.torch.TensorProto.tensor)
  
  ::syft::lib::torch::TensorData* temp = tensor_;
  tensor_ = nullptr;
  return temp;
}
inline ::syft::lib::torch::TensorData* TensorProto::_internal_mutable_tensor() {
  
  if (tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::lib::torch::TensorData>(GetArena());
    tensor_ = p;
  }
  return tensor_;
}
inline ::syft::lib::torch::TensorData* TensorProto::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable:syft.lib.torch.TensorProto.tensor)
  return _internal_mutable_tensor();
}
inline void TensorProto::set_allocated_tensor(::syft::lib::torch::TensorData* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tensor_;
  }
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor);
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    
  } else {
    
  }
  tensor_ = tensor;
  // @@protoc_insertion_point(field_set_allocated:syft.lib.torch.TensorProto.tensor)
}

// .syft.lib.torch.TensorData grad = 2;
inline bool TensorProto::_internal_has_grad() const {
  return this != internal_default_instance() && grad_ != nullptr;
}
inline bool TensorProto::has_grad() const {
  return _internal_has_grad();
}
inline void TensorProto::clear_grad() {
  if (GetArena() == nullptr && grad_ != nullptr) {
    delete grad_;
  }
  grad_ = nullptr;
}
inline const ::syft::lib::torch::TensorData& TensorProto::_internal_grad() const {
  const ::syft::lib::torch::TensorData* p = grad_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::lib::torch::TensorData&>(
      ::syft::lib::torch::_TensorData_default_instance_);
}
inline const ::syft::lib::torch::TensorData& TensorProto::grad() const {
  // @@protoc_insertion_point(field_get:syft.lib.torch.TensorProto.grad)
  return _internal_grad();
}
inline void TensorProto::unsafe_arena_set_allocated_grad(
    ::syft::lib::torch::TensorData* grad) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grad_);
  }
  grad_ = grad;
  if (grad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.lib.torch.TensorProto.grad)
}
inline ::syft::lib::torch::TensorData* TensorProto::release_grad() {
  
  ::syft::lib::torch::TensorData* temp = grad_;
  grad_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::lib::torch::TensorData* TensorProto::unsafe_arena_release_grad() {
  // @@protoc_insertion_point(field_release:syft.lib.torch.TensorProto.grad)
  
  ::syft::lib::torch::TensorData* temp = grad_;
  grad_ = nullptr;
  return temp;
}
inline ::syft::lib::torch::TensorData* TensorProto::_internal_mutable_grad() {
  
  if (grad_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::lib::torch::TensorData>(GetArena());
    grad_ = p;
  }
  return grad_;
}
inline ::syft::lib::torch::TensorData* TensorProto::mutable_grad() {
  // @@protoc_insertion_point(field_mutable:syft.lib.torch.TensorProto.grad)
  return _internal_mutable_grad();
}
inline void TensorProto::set_allocated_grad(::syft::lib::torch::TensorData* grad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grad_;
  }
  if (grad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grad);
    if (message_arena != submessage_arena) {
      grad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grad, submessage_arena);
    }
    
  } else {
    
  }
  grad_ = grad;
  // @@protoc_insertion_point(field_set_allocated:syft.lib.torch.TensorProto.grad)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace torch
}  // namespace lib
}  // namespace syft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2flib_2ftorch_2ftensor_2eproto
