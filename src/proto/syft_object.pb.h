// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/syft_object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fsyft_5fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fsyft_5fobject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/core/core_object.pb.h"
#include "proto/ast/ast_object.pb.h"
#include "proto/lib/lib_object.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fsyft_5fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fsyft_5fobject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsyft_5fobject_2eproto;
namespace syft {
class SyftObject;
class SyftObjectDefaultTypeInternal;
extern SyftObjectDefaultTypeInternal _SyftObject_default_instance_;
}  // namespace syft
PROTOBUF_NAMESPACE_OPEN
template<> ::syft::SyftObject* Arena::CreateMaybeMessage<::syft::SyftObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syft {

// ===================================================================

class SyftObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syft.SyftObject) */ {
 public:
  inline SyftObject() : SyftObject(nullptr) {}
  virtual ~SyftObject();

  SyftObject(const SyftObject& from);
  SyftObject(SyftObject&& from) noexcept
    : SyftObject() {
    *this = ::std::move(from);
  }

  inline SyftObject& operator=(const SyftObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyftObject& operator=(SyftObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyftObject& default_instance();

  static inline const SyftObject* internal_default_instance() {
    return reinterpret_cast<const SyftObject*>(
               &_SyftObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyftObject& a, SyftObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SyftObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyftObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyftObject* New() const final {
    return CreateMaybeMessage<SyftObject>(nullptr);
  }

  SyftObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyftObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyftObject& from);
  void MergeFrom(const SyftObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyftObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syft.SyftObject";
  }
  protected:
  explicit SyftObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fsyft_5fobject_2eproto);
    return ::descriptor_table_proto_2fsyft_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoreObjFieldNumber = 1,
    kAstObjFieldNumber = 2,
    kLibObjFieldNumber = 3,
  };
  // .syft.core.CoreObject core_obj = 1;
  bool has_core_obj() const;
  private:
  bool _internal_has_core_obj() const;
  public:
  void clear_core_obj();
  const ::syft::core::CoreObject& core_obj() const;
  ::syft::core::CoreObject* release_core_obj();
  ::syft::core::CoreObject* mutable_core_obj();
  void set_allocated_core_obj(::syft::core::CoreObject* core_obj);
  private:
  const ::syft::core::CoreObject& _internal_core_obj() const;
  ::syft::core::CoreObject* _internal_mutable_core_obj();
  public:
  void unsafe_arena_set_allocated_core_obj(
      ::syft::core::CoreObject* core_obj);
  ::syft::core::CoreObject* unsafe_arena_release_core_obj();

  // .syft.ast.AstObject ast_obj = 2;
  bool has_ast_obj() const;
  private:
  bool _internal_has_ast_obj() const;
  public:
  void clear_ast_obj();
  const ::syft::ast::AstObject& ast_obj() const;
  ::syft::ast::AstObject* release_ast_obj();
  ::syft::ast::AstObject* mutable_ast_obj();
  void set_allocated_ast_obj(::syft::ast::AstObject* ast_obj);
  private:
  const ::syft::ast::AstObject& _internal_ast_obj() const;
  ::syft::ast::AstObject* _internal_mutable_ast_obj();
  public:
  void unsafe_arena_set_allocated_ast_obj(
      ::syft::ast::AstObject* ast_obj);
  ::syft::ast::AstObject* unsafe_arena_release_ast_obj();

  // .syft.lib.LibObject lib_obj = 3;
  bool has_lib_obj() const;
  private:
  bool _internal_has_lib_obj() const;
  public:
  void clear_lib_obj();
  const ::syft::lib::LibObject& lib_obj() const;
  ::syft::lib::LibObject* release_lib_obj();
  ::syft::lib::LibObject* mutable_lib_obj();
  void set_allocated_lib_obj(::syft::lib::LibObject* lib_obj);
  private:
  const ::syft::lib::LibObject& _internal_lib_obj() const;
  ::syft::lib::LibObject* _internal_mutable_lib_obj();
  public:
  void unsafe_arena_set_allocated_lib_obj(
      ::syft::lib::LibObject* lib_obj);
  ::syft::lib::LibObject* unsafe_arena_release_lib_obj();

  // @@protoc_insertion_point(class_scope:syft.SyftObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::syft::core::CoreObject* core_obj_;
  ::syft::ast::AstObject* ast_obj_;
  ::syft::lib::LibObject* lib_obj_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsyft_5fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyftObject

// .syft.core.CoreObject core_obj = 1;
inline bool SyftObject::_internal_has_core_obj() const {
  return this != internal_default_instance() && core_obj_ != nullptr;
}
inline bool SyftObject::has_core_obj() const {
  return _internal_has_core_obj();
}
inline const ::syft::core::CoreObject& SyftObject::_internal_core_obj() const {
  const ::syft::core::CoreObject* p = core_obj_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::core::CoreObject&>(
      ::syft::core::_CoreObject_default_instance_);
}
inline const ::syft::core::CoreObject& SyftObject::core_obj() const {
  // @@protoc_insertion_point(field_get:syft.SyftObject.core_obj)
  return _internal_core_obj();
}
inline void SyftObject::unsafe_arena_set_allocated_core_obj(
    ::syft::core::CoreObject* core_obj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(core_obj_);
  }
  core_obj_ = core_obj;
  if (core_obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.SyftObject.core_obj)
}
inline ::syft::core::CoreObject* SyftObject::release_core_obj() {
  
  ::syft::core::CoreObject* temp = core_obj_;
  core_obj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::core::CoreObject* SyftObject::unsafe_arena_release_core_obj() {
  // @@protoc_insertion_point(field_release:syft.SyftObject.core_obj)
  
  ::syft::core::CoreObject* temp = core_obj_;
  core_obj_ = nullptr;
  return temp;
}
inline ::syft::core::CoreObject* SyftObject::_internal_mutable_core_obj() {
  
  if (core_obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::core::CoreObject>(GetArena());
    core_obj_ = p;
  }
  return core_obj_;
}
inline ::syft::core::CoreObject* SyftObject::mutable_core_obj() {
  // @@protoc_insertion_point(field_mutable:syft.SyftObject.core_obj)
  return _internal_mutable_core_obj();
}
inline void SyftObject::set_allocated_core_obj(::syft::core::CoreObject* core_obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(core_obj_);
  }
  if (core_obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(core_obj)->GetArena();
    if (message_arena != submessage_arena) {
      core_obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, core_obj, submessage_arena);
    }
    
  } else {
    
  }
  core_obj_ = core_obj;
  // @@protoc_insertion_point(field_set_allocated:syft.SyftObject.core_obj)
}

// .syft.ast.AstObject ast_obj = 2;
inline bool SyftObject::_internal_has_ast_obj() const {
  return this != internal_default_instance() && ast_obj_ != nullptr;
}
inline bool SyftObject::has_ast_obj() const {
  return _internal_has_ast_obj();
}
inline const ::syft::ast::AstObject& SyftObject::_internal_ast_obj() const {
  const ::syft::ast::AstObject* p = ast_obj_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::ast::AstObject&>(
      ::syft::ast::_AstObject_default_instance_);
}
inline const ::syft::ast::AstObject& SyftObject::ast_obj() const {
  // @@protoc_insertion_point(field_get:syft.SyftObject.ast_obj)
  return _internal_ast_obj();
}
inline void SyftObject::unsafe_arena_set_allocated_ast_obj(
    ::syft::ast::AstObject* ast_obj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_obj_);
  }
  ast_obj_ = ast_obj;
  if (ast_obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.SyftObject.ast_obj)
}
inline ::syft::ast::AstObject* SyftObject::release_ast_obj() {
  
  ::syft::ast::AstObject* temp = ast_obj_;
  ast_obj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::ast::AstObject* SyftObject::unsafe_arena_release_ast_obj() {
  // @@protoc_insertion_point(field_release:syft.SyftObject.ast_obj)
  
  ::syft::ast::AstObject* temp = ast_obj_;
  ast_obj_ = nullptr;
  return temp;
}
inline ::syft::ast::AstObject* SyftObject::_internal_mutable_ast_obj() {
  
  if (ast_obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::ast::AstObject>(GetArena());
    ast_obj_ = p;
  }
  return ast_obj_;
}
inline ::syft::ast::AstObject* SyftObject::mutable_ast_obj() {
  // @@protoc_insertion_point(field_mutable:syft.SyftObject.ast_obj)
  return _internal_mutable_ast_obj();
}
inline void SyftObject::set_allocated_ast_obj(::syft::ast::AstObject* ast_obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_obj_);
  }
  if (ast_obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_obj)->GetArena();
    if (message_arena != submessage_arena) {
      ast_obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast_obj, submessage_arena);
    }
    
  } else {
    
  }
  ast_obj_ = ast_obj;
  // @@protoc_insertion_point(field_set_allocated:syft.SyftObject.ast_obj)
}

// .syft.lib.LibObject lib_obj = 3;
inline bool SyftObject::_internal_has_lib_obj() const {
  return this != internal_default_instance() && lib_obj_ != nullptr;
}
inline bool SyftObject::has_lib_obj() const {
  return _internal_has_lib_obj();
}
inline const ::syft::lib::LibObject& SyftObject::_internal_lib_obj() const {
  const ::syft::lib::LibObject* p = lib_obj_;
  return p != nullptr ? *p : reinterpret_cast<const ::syft::lib::LibObject&>(
      ::syft::lib::_LibObject_default_instance_);
}
inline const ::syft::lib::LibObject& SyftObject::lib_obj() const {
  // @@protoc_insertion_point(field_get:syft.SyftObject.lib_obj)
  return _internal_lib_obj();
}
inline void SyftObject::unsafe_arena_set_allocated_lib_obj(
    ::syft::lib::LibObject* lib_obj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lib_obj_);
  }
  lib_obj_ = lib_obj;
  if (lib_obj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syft.SyftObject.lib_obj)
}
inline ::syft::lib::LibObject* SyftObject::release_lib_obj() {
  
  ::syft::lib::LibObject* temp = lib_obj_;
  lib_obj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syft::lib::LibObject* SyftObject::unsafe_arena_release_lib_obj() {
  // @@protoc_insertion_point(field_release:syft.SyftObject.lib_obj)
  
  ::syft::lib::LibObject* temp = lib_obj_;
  lib_obj_ = nullptr;
  return temp;
}
inline ::syft::lib::LibObject* SyftObject::_internal_mutable_lib_obj() {
  
  if (lib_obj_ == nullptr) {
    auto* p = CreateMaybeMessage<::syft::lib::LibObject>(GetArena());
    lib_obj_ = p;
  }
  return lib_obj_;
}
inline ::syft::lib::LibObject* SyftObject::mutable_lib_obj() {
  // @@protoc_insertion_point(field_mutable:syft.SyftObject.lib_obj)
  return _internal_mutable_lib_obj();
}
inline void SyftObject::set_allocated_lib_obj(::syft::lib::LibObject* lib_obj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lib_obj_);
  }
  if (lib_obj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lib_obj)->GetArena();
    if (message_arena != submessage_arena) {
      lib_obj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lib_obj, submessage_arena);
    }
    
  } else {
    
  }
  lib_obj_ = lib_obj;
  // @@protoc_insertion_point(field_set_allocated:syft.SyftObject.lib_obj)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace syft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fsyft_5fobject_2eproto
